---
tags: [API]
title: HarvardEnergy API
---

The HarvardEnergy API allows you to request data programmatically from
http://energy.cs50.net/[HarvardEnergy] in
http://en.wikipedia.org/wiki/Comma-separated_values[CSV],
http://en.wikipedia.org/wiki/JSON[JSON],
http://en.wikipedia.org/wiki/JSON#JSONP[JSONP], or
http://php.net/manual/en/function.serialize.php[serialized PHP] format.
The API provides a
http://en.wikipedia.org/wiki/Representational_State_Transfer[RESTful]
interface, which means that you can query it using simple HTTP GET
requests.


== Author

To report bugs or request features, contact:

mailto:malan@post.harvard.edu[David J. Malan '99] +
http://www.cs.harvard.edu/malan/


== License

Use of this API is governed by a
http://creativecommons.org/licenses/by-nc/3.0/[Creative Commons
Attribution-Noncommerical 3.0 Unported] license, which means that you
may use its data for non-commercial purposes so long as you attribute
your data to this API, as by including a link to
http://energy.cs50.net/[HarvardEnergy] in your own work. To discuss
commercial purposes, contact the author.


== Methods

All methods support
http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing[CORS].


=== buildings

To query the HarvardEnergy API for buildings, contact the server via
URLs in this format:

`http://energy.cs50.net/api/1.0/buildings?param1=value1&param2=value2&...`

Supported parameters include:

[cols=",",options="header",]
|=======================================================================
|parameter |description
|callback |_Required iff *output* is *jsonp*_. Callback function with
which response will be padded.

|id |_Optional._ Comma-separated list of buildings' IDs. If omitted, all
buildings are returned.

|output |_Required._ Format for output. Must be *csv*, *json*, *jsonp*,
or *php*.
|=======================================================================

If any parameters are malformed or any required parameters are omitted,
an empty response will be returned along with, possibly, HTTP status
code
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1[400 Bad
Request].

Note that buildings' IDs are not strictly numeric; some are
alphanumeric.

Included in this method's output is each building's
http://www.answers.com/topic/gross-square-foot[gross square footage]
(GSF), if known.

*Because the HarvardEnergy API and the link:HarvardMaps API[HarvardMaps
API] rely on data from different sources on campus, this method's output
may not be identical to the link:../api/maps[HarvardMaps API]'s
link:../api/maps#buildings[buildings] method.*


==== CSV

If you request buildings in CSV format (e.g.,
http://energy.cs50.net/api/1.0/buildings?id=952,991&output=csv), the
response will be a series of comma-delimited rows, per the below:

[source,text]
----
id,name,gsf
991,"Mather House",209979
952,"Matthews Hall",59075
----

Note that the response's first row defines the CSV file's fields.
Fields' order may change over time, so do not hardcode indices into your
own code. Use that first row to determine fields' indices dynamically,
per this article on link:../Neat_Tricks#Parsing_CSV[parsing CSV].

*Beware opening the CSV file in Excel, as some buildings' IDs have
leading 0s that Excel likes to remove.*


==== JSON

If you request buildings in JSON format (e.g.,
http://energy.cs50.net/api/1.0/buildings?id=952,991&output=json), the
response wil be an associative array (whose keys are buildings' IDs) of
objects, per the below:

[source,javascript]
----
{
   "991":{
      "name":"Mather House",
      "gsf":"209979"
   },
   "952":{
      "name":"Matthews Hall",
      "gsf":"59075"
   }
}
----


==== JSONP

If you request buildings in JSON format (e.g.,
http://energy.cs50.net/api/1.0/buildings?id=952,991&output=jsonp&callback=parseResponse),
the response will be a padded associative array (whose keys are
buildings' IDs) of objects, per the below:

[source,javascript]
----
parseResponse({"991":{"name":"Mather House","gsf":"209979"},"952":{"name":"Matthews Hall","gsf":"59075"}})
----


==== PHP

If you request buildings in serialized PHP format (e.g.,
http://energy.cs50.net/api/1.0/buildings?id=952,991&output=php), the
response will be a serialized associative array (whose keys are
buildings' IDs) of associative arrays, per the below:

[source,php]
----
a:2:{i:991;a:2:{s:4:"name";s:12:"Mather House";s:3:"gsf";s:6:"209979";}i:952;a:2:{s:4:"name";s:13:"Matthews Hall";s:3:"gsf";s:5:"59075";}}
----

Once you http://php.net/manual/en/function.unserialize.php[unserialize]
that response, you'll have the below in memory:

[source,php]
----
Array
(
    [991] => Array
        (
            [name] => Mather House
            [gsf] => 209979
        )

    [952] => Array
        (
            [name] => Matthews Hall
            [gsf] => 59075
        )

)
----


=== utilities

To query the HarvardEnergy API for utilities, contact the server via
URLs in this format:

`http://energy.cs50.net/api/1.0/utilities?param1=value1&param2=value2&...`

Supported parameters include:

[cols=",",options="header",]
|=======================================================================
|parameter |description
|callback |_Required iff *output* is *jsonp*_. Callback function with
which response will be padded.

|month |_Optional._ A month in *YYYY-MM* format. If omitted, all months
will be assumed.

|id |_Required._ Comma-separated list of one or more buildings' IDs.

|output |_Required._ Format for output. Must be *csv*, *json*, *jsonp*,
or *php*.
|=======================================================================

If any parameters are malformed or any required parameters are omitted,
an empty response will be returned along with, possibly, HTTP status
code
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1[400 Bad
Request].


==== CSV

If you request utilities in CSV format (e.g.,
http://energy.cs50.net/api/1.0/utilities?id=991&month=2010-01&output=csv),
the response will be a series of comma-delimited rows, per the below:

[source,text]
----
month,utility,cost,use
2010-01,Electric,5440.37,51373
2010-01,Steam,29332.96,1528
----

Note that the response's first row defines the CSV file's fields.
Fields' order may change over time, so do not hardcode indices into your
own code. Use that first row to determine fields' indices dynamically,
per this article on link:../Neat_Tricks#Parsing_CSV[parsing CSV].


==== JSON

If you request utilities in JSON format (e.g.,
http://energy.cs50.net/api/1.0/utilities?id=991&month=2010-01&output=json),
the response will be an associative array (whose keys are months) of
objects, per the below:

[source,javascript]
----
{
   "2010-01":{
      "Electric":{
         "cost":"5440.37",
         "use":"51373"
      },
      "Steam":{
         "cost":"29332.96",
         "use":"1528"
      }
   }
}
----


==== JSONP

If you request utilities in JSON format (e.g.,
http://energy.cs50.net/api/1.0/utilities?id=991&month=2010-01&output=jsonp&callback=parseResponse),
the response will be a padded associative array (whose keys are months)
of objects, per the below:

[source,javascript]
----
parseResponse({"2010-01":{"Electric":{"cost":"5440.37","use":"51373"},"Steam":{"cost":"29332.96","use":"1528"}}})
----


==== PHP

If you request utilities in serialized PHP format (e.g.,
http://energy.cs50.net/api/1.0/utilities?id=991&month=2010-01&output=php),
the response will be a serialized associative array (whose keys are
months) of associative arrays, per the below:

[source,php]
----
a:1:{s:7:"2010-01";a:2:{s:8:"Electric";a:2:{s:4:"cost";s:7:"5440.37";s:3:"use";s:5:"51373";}s:5:"Steam";a:2:{s:4:"cost";s:8:"29332.96";s:3:"use";s:4:"1528";}}}
----

Once you http://php.net/manual/en/function.unserialize.php[unserialize]
that response, you'll have the below in memory:

[source,php]
----
Array
(
    [2010-01] => Array
        (
            [Electric] => Array
                (
                    [cost] => 5440.37
                    [use] => 51373
                )

            [Steam] => Array
                (
                    [cost] => 29332.96
                    [use] => 1528
                )

        )

)
----


== Examples

* Returns all buildings:
** http://energy.cs50.net/api/1.0/buildings?output=csv
** http://energy.cs50.net/api/1.0/buildings?output=json
** http://energy.cs50.net/api/1.0/buildings?output=jsonp
** http://energy.cs50.net/api/1.0/buildings?output=php
* Returns Matthews Hall and Mather House:
** http://energy.cs50.net/api/1.0/buildings?id=952,991output=csv
** http://energy.cs50.net/api/1.0/buildings?id=952,991output=json
** http://energy.cs50.net/api/1.0/buildings?id=952,991output=jsonp
** http://energy.cs50.net/api/1.0/buildings?id=952,991output=php
* Returns Mather House's utilities:
** http://energy.cs50.net/api/1.0/utilities?id=991&output=csv
** http://energy.cs50.net/api/1.0/utilities?id=991&output=json
** http://energy.cs50.net/api/1.0/utilities?id=991&output=jsonp
** http://energy.cs50.net/api/1.0/utilities?id=991&output=php
* Return's Mather Houses's utilities for January 2010:
** http://energy.cs50.net/api/1.0/utilities?id=991&month=2010-01&output=csv
** http://energy.cs50.net/api/1.0/utilities?id=991&month=2010-01&output=json
** http://energy.cs50.net/api/1.0/utilities?id=991&month=2010-01&output=jsonp
** http://energy.cs50.net/api/1.0/utilities?id=991&month=2010-01&output=php


See Also
--------

* link:Neat_Tricks#Parsing_CSV[Parsing CSV]
* link:Neat_Tricks#Parsing_JSON[Parsing JSON]
* link:Neat_Tricks#Parsing_JSONP[Parsing JSONP]
* link:Neat_Tricks#Unserializing_PHP[Unserializing PHP]


Related APIs
------------

* link:HarvardCourses API[HarvardCourses API]
* link:HarvardEvents API[HarvardEvents API]
* link:HarvardFood API[HarvardFood API]
* link:HarvardMaps API[HarvardMaps API]
* link:HarvardNews API[HarvardNews API]
* link:HarvardTweets API[HarvardTweets API]
* link:Shuttleboy API[Shuttleboy API]


External Links
--------------

* http://en.wikipedia.org/wiki/Comma-separated_values[Comma-separated
values]
* http://en.wikipedia.org/wiki/JSON[JSON]
* http://en.wikipedia.org/wiki/JSON#JSONP[JSONP]
* http://php.net/manual/en/function.serialize.php[PHP: serialize]
* http://php.net/manual/en/function.unserialize.php[PHP: unserialize]

= CS50 Courses API
:toc: left

The CS50 Courses API allows you to request data programmatically from
http://courses.cs50.net/[CS50 Courses] in
http://en.wikipedia.org/wiki/JSON[JSON],
http://en.wikipedia.org/wiki/JSON#JSONP[JSONP], or
http://en.wikipedia.org/wiki/XML[XML] format. The API provides a
http://en.wikipedia.org/wiki/Representational_State_Transfer[RESTful]
interface, which means that you can query it using simple HTTP requests.

At least once per day, CS50 synchronizes with the
http://www.registrar.fas.harvard.edu/courses-exams/courses-instruction[Courses of Instruction]. Because FAS offers so many courses, this API tends to
return a lot of data. For performance's sake, you yourself should cache
your own copy locally and synchronize with this API once per day.

This API does not provide Q data, but you may request a dump of Q data
(in CSV and SQL format) at https://www.cs50.net/q/request[cs50.net/q/request].

== License

Use of this API is governed by a
http://creativecommons.org/licenses/by-nc/4.0/[Creative Commons
Attribution-NonCommercial 4.0 International] license, which means that you
may use its data for non-commercial purposes so long as you attribute
your data to this API, as by including a link to
this documentation in your own work. To discuss
commercial purposes, contact the author.

== Registration

To use this API, you must https://cs50.3scale.net/#plans[register for an API key].

== Limits

Usage of this API is limited to 60 queries per minute.

== Try it out!

The online https://cs50.3scale.net/docs[documentation] allows you, once you sign in,
to try out making queries on you own, so be sure to try out some queries and see how it works.

== Bug Report

If you find bugs in any CS50 API, email mailto:api@cs50.net[api@cs50.net] with your bug.

== Methods

All methods support
http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing[CORS].

=== courses

To query the CS50 Courses API for courses, contact the server via URLs
in this format:

----
http://api.cs50.net/courses/3/courses?param1=value1&param2=value2&...
----

Supported parameters include:

[options=header]
|===
| parameter | description
| `key` | _Required._ Your API key.
| `cat_num` | _Optional._ A comma-separated list of catalog numbers. Only courses with those catalog numbers will be returned.
| `faculty` | _Optional._ A comma-separated list faculty members' IDs.  Only courses taught by at least one of them will be returned.
| `field` | _Optional._ A comma-separated list fields' IDs. Only courses in those fields will be returned.
| `output` | _Required._ Format for output. Must be `csv`, `json`, `jsonp`, `php`, or `xml`.
| `q` | _Optional._ Query string. Only courses whose catalog number, field, number, title, and/or description contain the string will be returned. Be sure to URL-encode this parameter's value (as with PHP's http://php.net/manual/en/function.urlencode.php[urlencode]).
| `term` | _Optional._ Must be `FALL` or `SPRING`.
|===

If any parameters are malformed or any required parameters are omitted,
an empty response will be returned along with, possibly, HTTP status
code http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1[400 Bad
Request].

A course offered both in the fall and in the spring will be returned as
two separate courses, in order that `faculty`, `meetings`, `building`,
and/or `room` might differ. You should thus consider the primary key of
this method's result set to be joint on `cat_num` and `term`.

If a course is taught by multiple faculty some term, `faculty` will be a
comma-separated list of faculty IDs.

Beware that `cat_num` may contain leading zeroes for historical reasons,
so be sure to treat it as a string, not as an integer.

==== JSON

If you request data in JSON format (e.g.,
`http://api.cs50.net/courses/3/courses?key=KEY&cat_num=4949&output=json`, where `KEY` is your API key), the
response will be an array of objects, per the below:

[source,javascript]
----
[
    {
        "cat_num": "4949",
        "term": "FALL",
        "bracketed": false,
        "field": "COMPSCI",
        "number": "50(Letter Grade)",
        "title": "Introduction to Computer Science I",
        "faculty": [
            {
                "id": "F98d2c536d93571eff451df8bd44823d8",
                "first": "David",
                "middle": "J.",
                "last": "Malan",
                "suffix": ""
            }
        ],
        "schedule": [
            {
                "day": "1",
                "type": "Lecture",
                "optional": false,
                "begin_time": "13:00:00",
                "end_time": "14:30:00"
            },
            {
                "day": "3",
                "type": "Lecture",
                "optional": false,
                "begin_time": "13:00:00",
                "end_time": "14:30:00"
            }
        ],
        "locations": [
            {
                "type": "Lecture",
                "building": "Memorial Hall",
                "room": "Sanders Theatre"
            }
        ],
        "description": "Introduction to the intellectual enterprises of computer science and the art of programming. This course teaches students how to think algorithmically and solve problems efficiently. Topics include abstraction, algorithms, data structures, encapsulation, resource management, security, software engineering, and web development. Languages include C, PHP, and JavaScript plus SQL, CSS, and HTML. Problem sets inspired by real-world domains of biology, cryptography, finance, forensics, and gaming. Designed for concentrators and non-concentrators alike, with or without prior programming experience.",
        "prerequisites": "",
        "notes": "Undergraduates, GSAS students, and cross-registered students may take CS50 either Satisfactory/Unsatisfactory (SAT/UNS) or for a letter grade. To take CS50 SAT/UNS, register for catalog number 43861. To take CS50 for a letter grade, register for catalog number 4949. When taken for a letter grade, this course meets the General Education requirement for undergraduates for Empirical and Mathematical Reasoning. See course\\'s website for FAQs. This course will also meet on Fri 9/5 and Fri 10/17. Students with conflicts may watch those lectures online."
    }
]
----

==== JSONP

If you request data in JSONP format (e.g.,
`http://api.cs50.net/courses/3/courses?key=KEY&cat_num=4949&output=jsonp&callback=parseResponse`, where `KEY` is your API key),
the response will be a padded array of objects, per the below:

[source,javascript]
----
parseResponse([{"cat_num": "4949", "term": "FALL", "bracketed": false, "field": "COMPSCI", "number": "50(Letter Grade)", "title": "Introduction to Computer Science I", "faculty": [{"id": "F98d2c536d93571eff451df8bd44823d8", "first": "David", "middle": "J.", "last": "Malan", "suffix": ""}], "schedule": [{"day": "1", "type": "Lecture", "optional": false, "begin_time": "13:00:00", "end_time": "14:30:00"}, {"day": "3", "type": "Lecture", "optional": false, "begin_time": "13:00:00", "end_time": "14:30:00"}], "locations": [{"type": "Lecture", "building": "Memorial Hall", "room": "Sanders Theatre"}], "description": "Introduction to the intellectual enterprises of computer science and the art of programming. This course teaches students how to think algorithmically and solve problems efficiently. Topics include abstraction, algorithms, data structures, encapsulation, resource management, security, software engineering, and web development. Languages include C, PHP, and JavaScript plus SQL, CSS, and HTML. Problem sets inspired by real-world domains of biology, cryptography, finance, forensics, and gaming. Designed for concentrators and non-concentrators alike, with or without prior programming experience.", "prerequisites": "", "notes": "Undergraduates, GSAS students, and cross-registered students may take CS50 either Satisfactory/Unsatisfactory (SAT/UNS) or for a letter grade. To take CS50 SAT/UNS, register for catalog number 43861. To take CS50 for a letter grade, register for catalog number 4949. When taken for a letter grade, this course meets the General Education requirement for undergraduates for Empirical and Mathematical Reasoning. See course\\'s website for FAQs. This course will also meet on Fri 9/5 and Fri 10/17. Students with conflicts may watch those lectures online."}])
----

==== XML

If you request data in XML format (e.g.,
`http://api.cs50.net/courses/3/courses?key=KEY&cat_num=4949&output=xml`, where `KEY` is your API key), the
response will be an XML document whose root element is `courses`, each
of whose children is an `course`, per the below:

[source,xml]
----

<?xml version="1.0" encoding="UTF-8" ?>
<courses>
   <course>
      <cat_num>4949</cat_num>
      <term>FALL</term>
      <bracketed>false</bracketed>
      <field>COMPSCI</field>
      <number>50(Letter Grade)</number>
      <title>Introduction to Computer Science I</title>
      <faculty>
         <member>
            <id>F98d2c536d93571eff451df8bd44823d8</id>
            <first>David</first>
            <middle>J.</middle>
            <last>Malan</last>
            <suffix></suffix>
         </member>
      </faculty>
      <schedule>
         <item>
            <day>1</day>
            <type>Lecture</type>
            <optional>false</optional>
            <begin_time>13:00:00</begin_time>
            <end_time>14:30:00</end_time>
            </item>
         <item>
            <day>3</day>
            <type>Lecture</type>
            <optional>false</optional>
            <begin_time>13:00:00</begin_time>
            <end_time>14:30:00</end_time>
         </item>
      </schedule>
      <locations>
         <item>
            <type>Lecture</type>
            <building>Memorial Hall</building>
            <room>Sanders Theatre</room>
         </item>
      </locations>
      <description>Introduction to the intellectual enterprises of computer science and the art of programming. This course teaches students how to think algorithmically and solve problems efficiently. Topics include abstraction, algorithms, data structures, encapsulation, resource management, security, software engineering, and web development. Languages include C, PHP, and JavaScript plus SQL, CSS, and HTML. Problem sets inspired by real-world domains of biology, cryptography, finance, forensics, and gaming. Designed for concentrators and non-concentrators alike, with or without prior programming experience.</description>
      <prerequisites></prerequisites>
      <notes>Undergraduates, GSAS students, and cross-registered students may take CS50 either Satisfactory/Unsatisfactory (SAT/UNS) or for a letter grade. To take CS50 SAT/UNS, register for catalog number 43861. To take CS50 for a letter grade, register for catalog number 4949. When taken for a letter grade, this course meets the General Education requirement for undergraduates for Empirical and Mathematical Reasoning. See course\&apos;s website for FAQs. This course will also meet on Fri 9/5 and Fri 10/17. Students with conflicts may watch those lectures online.</notes>
   </course>
</courses>
----

=== faculty

To query the CS50 Courses API for faculty, contact the server via URLs
in this format:

----
http://api.cs50.net/courses/3/faculty?param1=value1&param2=value2&...
----

Supported parameters include:

[options=header]
|===
| parameter | description
| `key` | _Required._ Your API key.
| `id` | _Optional._ A comma-separated list of faculty members' IDs.
| `output` | _Required._ Format for output. Must be `csv`, `json`, `jsonp`, `php`, or `xml`.
|===

If any parameters are malformed or any required parameters are omitted,
an empty response will be returned along with, possibly, HTTP status
code
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1[400 Bad
Request].

==== JSON

If you request data in JSON format (e.g.,
`http://api.cs50.net/courses/3/faculty?key=KEY&id=F98d2c536d93571eff451df8bd44823d8&output=json`, where `KEY` is your API key),
the response will be an array of objects, per the below:

[source,javascript]
----
[
    {
        "id": "F98d2c536d93571eff451df8bd44823d8",
        "first": "David",
        "middle": "J.",
        "last": "Malan",
        "suffix": ""
    }
]
----

==== JSONP

If you request data in JSONP format (e.g.,
`http://api.cs50.net/courses/3/faculty?key=KEY&id=F98d2c536d93571eff451df8bd44823d8&output=jsonp&callback=parseResponse`, where `KEY` is your API key),
the response will be a padded array of objects, per the below:

[source,javascript]
----
parseResponse([{"id":"F98d2c536d93571eff451df8bd44823d8","first":"David","middle":"J.","last":"Malan","suffix":""}])
----

=== XML

If you request data in XML format (e.g.,
`http://api.cs50.net/courses/3/faculty?key=KEY&id=98d2c536d93571eff451df8bd44823d8&output=xml`, where `KEY` is your API key),
the response will be an XML document whose root element is `courses`,
each of whose children is an `course`, per the below:

[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<faculty>
  <member>
    <id>F98d2c536d93571eff451df8bd44823d8</id>
    <first>David</first>
    <middle>J.</middle>
    <last>Malan</last>
    <suffix />
  </member>
</faculty>
----

=== fields

To query the CS50 Courses API for fields of study, contact the server
via URLs in this format:

----
http://api.cs50.net/courses/3/fields?param1=value1&param2=value2&...
----

Supported parameters include:

[options=header]
|===
| parameter | description
| `key` | _Required._ Your API key.
| `id` | _Optional._ A comma-separated list of fields' IDs.
| `output` | _Required._ Format for output. Must be `csv`, `json`, `jsonp`, `php`, or `xml`.
|===

If any parameters are malformed or any required parameters are omitted,
an empty response will be returned along with, possibly, HTTP status
code
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1[400 Bad
Request].

==== JSON

If you request data in JSON format (e.g.,
`http://api.cs50.net/courses/3/fields?key=KEY&id=COMPSCI&output=json`, where `KEY` is your API key), the
response will be an array of objects, per the below:

[source,javascript]
----
[
    {
        "id": "COMPSCI",
        "name": "Computer Science",
        "type": "Concentration"
    }
]
----

==== JSONP

If you request data in JSONP format (e.g.,
`http://api.cs50.net/courses/3/fields?key=KEY&id=COMPSCI&output=jsonp&callback=parseResponse`, where `KEY` is your API key),
the response will be a padded array of objects, per the below:

[source,javascript]
----
parseResponse([{"id":"COMPSCI","name":"Computer Science","type": "Concentration"}])
----

==== XML

If you request data in XML format (e.g.,
`http://api.cs50.net/courses/fields?key=KEY&id=COMPSCI&output=xml`, where `KEY` is your API key), the
response will be an XML document whose root element is `courses`, each
of whose children is an `course`, per the below:

[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<fields>
  <field>
    <id>COMPSCI</id>
    <name>Computer Science</name>
    <type>Concentration</type>
  </field>
</fields>
----

== Examples

* Returns all courses:
** http://api.cs50.net/courses/3/courses?key=KEY&output=json
** http://api.cs50.net/courses/3/courses?key=KEY&output=jsonp&callback=parseResponse
** http://api.cs50.net/courses/3/courses?key=KEY&output=xml
* Returns course with catalog number 4949:
** http://api.cs50.net/courses/3/courses?key=KEY&cat_num=4949&output=json
** http://api.cs50.net/courses/3/courses?key=KEY&cat_num=4949&output=jsonp&callback=parseResponse
** http://api.cs50.net/courses/3/courses?key=KEY&cat_num=4949&output=xml
* Returns courses taught by David J. Malan:
** http://api.cs50.net/courses/3/courses?key=KEY&faculty=F98d2c536d93571eff451df8bd44823d8&output=json
** http://api.cs50.net/courses/3/courses?key=KEY&faculty=F98d2c536d93571eff451df8bd44823d8&output=jsonp&callback=parseResponse
** http://api.cs50.net/courses/3/courses?key=KEY&faculty=F98d2c536d93571eff451df8bd44823d8&output=xml
* Returns Computer Science courses:
** http://api.cs50.net/courses/3/courses?key=KEY&field=COMPSCI&output=json
** http://api.cs50.net/courses/3/courses?key=KEY&field=COMPSCI&output=jsonp&callback=parseResponse
** http://api.cs50.net/courses/3/courses?key=KEY&field=COMPSCI&output=xml
* Returns courses related to archaeology:
** http://api.cs50.net/courses/3/courses?key=KEY&q=archaeology&output=json
** http://api.cs50.net/courses/3/courses?key=KEY&q=archaeology&output=jsonp&callback=parseResponse
** http://api.cs50.net/courses/3/courses?key=KEY&q=archaeology&output=xml
* Returns David J. Malan:
** http://api.cs50.net/courses/3/faculty?key=KEY&id=F98d2c536d93571eff451df8bd44823d8&output=json
** http://api.cs50.net/courses/3/faculty?key=KEY&id=F98d2c536d93571eff451df8bd44823d8&output=jsonp&callback=parseResponse
** http://api.cs50.net/courses/3/faculty?key=KEY&id=F98d2c536d93571eff451df8bd44823d8&output=xml
* Returns Computer Science:
** http://api.cs50.net/courses/3/fields?key=KEY&id=COMPSCI&output=json
** http://api.cs50.net/courses/3/fields?key=KEY&id=COMPSCI&output=jsonp&callback=parseResponse
** http://api.cs50.net/courses/3/fields?key=KEY&id=COMPSCI&output=xml

== External Links

* http://en.wikipedia.org/wiki/JSON[JSON]
* http://en.wikipedia.org/wiki/JSON#JSONP[JSONP]
* http://en.wikipedia.org/wiki/XML[XML]

== Changelog

* 1.0
** Complete overhaul. Integrated with
http://courses.cs50.net/[CS50 Courses]. Added support for multiple
methods and multiple output formats.
* 2
** Added requirement of API key.
* 3
** Complete overhaul. Rewrote backend, added 3scale support

= CS50 Food API
:toc: left

The CS50 Food API allows you to retrieve
http://www.dining.harvard.edu/[HUDS] menus in
http://en.wikipedia.org/wiki/JSON[JSON],
http://en.wikipedia.org/wiki/JSON#JSONP[JSONP], or
http://en.wikipedia.org/wiki/XML[XML]. Each
night, CS50 link:../../scraping[screen-scrapes] nutritional facts,
menus, and recipes from
http://www.foodpro.huds.harvard.edu/foodpro/menu_items.asp[This Week's
Menu] and caches them in a local database that you can query. The API
provides a
http://en.wikipedia.org/wiki/Representational_State_Transfer[RESTful]
interface, which means that you can query it using simple HTTP GET
requests.

With some exceptions, the API's database contains menus from 2009-10-28
through the present date plus 6 days into the future; only for menus
from 2011-03-21 onward are nutritional facts, portions, and recipes
available. This manual's article on link:/scraping/[Screen Scraping]
discusses how this API gets its data.

*This API is currently offline due to some bugs in the HUDS website. Version 3, up soon, will account for these.*

== License

Use of this API is governed by a
http://creativecommons.org/licenses/by-nc/4.0/[Creative Commons
Attribution-NonCommercial 4.0 International] license, which means that you
may use its data for non-commercial purposes so long as you attribute
your data to this API, as by including a link to
this documentation in your own work. To discuss
commercial purposes, contact the author.

== Registration

To use this API, you must https://docs.cs50.net/[register for an API key].

== Limits

Usage of this API is limited to 60 queries per minute.

== Methods

All methods support
http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing[CORS].

=== facts

To query the CS50 Food API for nutritional facts, contact the server
via URLs in this format:

----
http://api.cs50.net/food/3/facts?param1=value1&param2=value2&...
----

Supported parameters include:

[options=header]
|===
| parameter | description
| `key`| _Required._ Your API key.
| `recipe` | _Required._ ID of recipe for which to get nutritional facts.
| `output` | _Required._ Format for output. Must be `json`, `jsonp`,
or `xml`.
| `portion` | _Optional._ The recipe's unit of measure; do not include unit itself.
|===

If any parameters are malformed or any required parameters are omitted,
an empty response will be returned along with, possibly, HTTP status
code http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1[400 Bad Request].

Some facts are only available as raw amounts; some facts are available
as raw amounts and as
http://www.fda.gov/food/labelingnutrition/consumerinformation/ucm078889.htm#see6[percent
daily values]. Percent daily values are based on a 2,000-calorie diet.
Facts are measured per the units below.

[options=header]
|===
| Fact | Amount | Percent
| Calcium | mg | %
| Calories | cal | %
| Calories from Fat | cal | _n/a_
| Cholesterol | mg | %
| Dietary Fiber | g | %
| Iron | mg | %
| Protein | g | %
| Saturated Fat | g | %
| Sodium | mg | %
| Sugars | g | %
| Total Carbs | g | %
| Total Fat | g | %
| Trans Fat | g | %
| Vitamin A | iu | %
| Vitamin C | mg | %
|===

==== JSON

If you request data in JSON format (e.g.,
`http://api.cs50.net/food/2/facts?key=KEY&recipe=117003&portion=1&output=json`, where `KEY` is your API key),
the response will be an array of objects, per the below:

[source,javascript]
----
[
   {
      "fact":"Calcium",
      "amount":48,
      "percent":4
   },
   {
      "fact":"Calories",
      "amount":250,
      "percent":8
   },
   {
      "fact":"Calories from Fat",
      "amount":135
   },
   {
      "fact":"Cholesterol",
      "amount":40,
      "percent":13
   },
   {
      "fact":"Dietary Fiber",
      "amount":1,
      "percent":4
   },
   {
      "fact":"Iron",
      "amount":1.5,
      "percent":10
   },
   {
      "fact":"Protein",
      "amount":15,
      "percent":24
   },
   {
      "fact":"Saturated Fat",
      "amount":3.5,
      "percent":18
   },
   {
      "fact":"Sodium",
      "amount":570,
      "percent":24
   },
   {
      "fact":"Sugars",
      "amount":0,
      "percent":0
   },
   {
      "fact":"Total Carbs",
      "amount":13,
      "percent":4
   },
   {
      "fact":"Total Fat",
      "amount":15,
      "percent":23
   },
   {
      "fact":"Trans Fat",
      "amount":0,
      "percent":0
   },
   {
      "fact":"Vitamin A",
      "amount":0,
      "percent":0
   },
   {
      "fact":"Vitamin C",
      "amount":0,
      "percent":0
   }
]
----

==== JSONP

If you request data in JSONP format (e.g.,
`http://api.cs50.net/food/2/facts?key=KEY&recipe=117003&portion=1&output=jsonp&callback=parseResponse`, where `KEY` is your API key),
the response will be a padded array of objects, per the below:

[source,javascript]
----
parseResponse([{"fact":"Calcium","amount":48,"percent":4},{"fact":"Calories","amount":250,"percent":8},{"fact":"Calories from Fat","amount":135},{"fact":"Cholesterol","amount":40,"percent":13},{"fact":"Dietary Fiber","amount":1,"percent":4},{"fact":"Iron","amount":1.5,"percent":10},{"fact":"Protein","amount":15,"percent":24},{"fact":"Saturated Fat","amount":3.5,"percent":18},{"fact":"Sodium","amount":570,"percent":24},{"fact":"Sugars","amount":0,"percent":0},{"fact":"Total Carbs","amount":13,"percent":4},{"fact":"Total Fat","amount":15,"percent":23},{"fact":"Trans Fat","amount":0,"percent":0},{"fact":"Vitamin A","amount":0,"percent":0},{"fact":"Vitamin C","amount":0,"percent":0}])
----
////
==== XML

If you request data in
(http://en.wikipedia.org/wiki/XML[XML])
format (e.g.,
`http://api.cs50.net/food/2/facts?key=KEY&recipe=117003&portion=1&output=xml`, where `KEY` is your API key),
the response will be an xml file, per the
below:

[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<facts>
   <type>
      <fact>Calcium</fact>
      <amount>48</amount>
      "percent":4
   },
   {
      "fact":"Calories",
      "amount":250,
      "percent":8
   },
   {
      "fact":"Calories from Fat",
      "amount":135
   },
   {
      "fact":"Cholesterol",
      "amount":40,
      "percent":13
   },
   {
      "fact":"Dietary Fiber",
      "amount":1,
      "percent":4
   },
   {
      "fact":"Iron",
      "amount":1.5,
      "percent":10
   },
   {
      "fact":"Protein",
      "amount":15,
      "percent":24
   },
   {
      "fact":"Saturated Fat",
      "amount":3.5,
      "percent":18
   },
   {
      "fact":"Sodium",
      "amount":570,
      "percent":24
   },
   {
      "fact":"Sugars",
      "amount":0,
      "percent":0
   },
   {
      "fact":"Total Carbs",
      "amount":13,
      "percent":4
   },
   {
      "fact":"Total Fat",
      "amount":15,
      "percent":23
   },
   {
      "fact":"Trans Fat",
      "amount":0,
      "percent":0
   },
   {
      "fact":"Vitamin A",
      "amount":0,
      "percent":0
   },
   {
      "fact":"Vitamin C",
      "amount":0,
      "percent":0
   }
]
  </field>
</fields>
----
////
=== menus

To query the CS50 Food API for menus, contact the server via URLs in
this format:

----
http://api.cs50.net/food/3/menus?param1=value1&param2=value2&...
----

Supported parameters include:

[options=header]
|===
| parameter | description
| `key` | _Required._ Your API key.
| `callback` | _Required iff `output` is `jsonp`._ Callback function with
which response will be padded.
| `edt` | _Optional._ An end date in `YYYY-MM-DD` format. Menus up through
this date will be returned. If omitted, `sdt` will be assumed.
| `meal` | _Optional._ Meal to return. Must be `BREAKFAST`, `BRUNCH`,
`LUNCH`, or `DINNER`. (`BRUNCH` and `LUNCH` are treated as synonyms, no
matter the day of the week.) If omitted, all meals will be returned.
| `output` | _Required._ Format for output. Must be `json`, `jsonp`,
or `xml`.
| `sdt` | _Optional._ A start date in `YYYY-MM-DD` format. Menus from this
date onward will be returned. If omitted, the current date will be
assumed.
|===

If any parameters are malformed or any required parameters are omitted,
an empty response will be returned along with, possibly, HTTP status
code
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1[400 Bad
Request].

==== JSON

If you request data in JSON format (e.g.,
`http://api.cs50.net/food/2/menus?key=KEY&meal=BREAKFAST&sdt=2011-03-21&output=json`, where `KEY` is your API key),
the response will be an array of objects, per the below:

[source,javascript]
----
[
   {
      "date":"2011-03-21",
      "meal":"BREAKFAST",
      "category":"BREAKFAST BAKERY",
      "recipe":"213012",
      "name":"Aesops Bagels",
      "portion":"1",
      "unit":"each"
   },
   {
      "date":"2011-03-21",
      "meal":"BREAKFAST",
      "category":"BREAKFAST BAKERY",
      "recipe":"213032",
      "name":"Whole Wheat Blueberry Muffin",
      "portion":"1",
      "unit":"each"
   },
   {
      "date":"2011-03-21",
      "meal":"BREAKFAST",
      "category":"BREAKFAST ENTREES",
      "recipe":"061003",
      "name":"Scrambled Eggs",
      "portion":"4",
      "unit":"oz"
   },
   {
      "date":"2011-03-21",
      "meal":"BREAKFAST",
      "category":"BREAKFAST ENTREES",
      "recipe":"061041",
      "name":"Egg Beaters",
      "portion":"4",
      "unit":"oz"
   },
   {
      "date":"2011-03-21",
      "meal":"BREAKFAST",
      "category":"BREAKFAST ENTREES",
      "recipe":"061042",
      "name":"Egg Whites",
      "portion":"4",
      "unit":"oz"
   },
   {
      "date":"2011-03-21",
      "meal":"BREAKFAST",
      "category":"BREAKFAST ENTREES",
      "recipe":"061056",
      "name":"Eggs Cooked to Order",
      "portion":"1",
      "unit":"each"
   },
   {
      "date":"2011-03-21",
      "meal":"BREAKFAST",
      "category":"BREAKFAST ENTREES",
      "recipe":"061062",
      "name":"Vegetable Frittata",
      "portion":"1\/24",
      "unit":"PAN"
   },
   {
      "date":"2011-03-21",
      "meal":"BREAKFAST",
      "category":"BREAKFAST ENTREES",
      "recipe":"161049",
      "name":"Hard Cooked Eggs",
      "portion":"1",
      "unit":"each"
   },
   {
      "date":"2011-03-21",
      "meal":"BREAKFAST",
      "category":"BREAKFAST MEATS",
      "recipe":"089003",
      "name":"Pork Sausage Pattie",
      "portion":"2",
      "unit":"each"
   },
   {
      "date":"2011-03-21",
      "meal":"BREAKFAST",
      "category":"MAKE OR BUILD YOUR OWN",
      "recipe":"031003",
      "name":"Oatmeal Steel Cut",
      "portion":"6",
      "unit":"fl. oz"
   },
   {
      "date":"2011-03-21",
      "meal":"BREAKFAST",
      "category":"MAKE OR BUILD YOUR OWN",
      "recipe":"031008",
      "name":"Grits",
      "portion":"6",
      "unit":"fl. oz"
   }
]
----

==== JSONP

If you request data in JSONP format (e.g.,
`http://api.cs50.net/food/2/menus?key=KEY&meal=BREAKFAST&sdt=2011-03-21&output=jsonp&callback=parseResponse`, where `KEY` is your API key),
the response will be a padded array of objects, per the below:

[source,javascript]
----
parseResponse([{"date":"2011-03-21","meal":"BREAKFAST","category":"BREAKFAST BAKERY","recipe":"213012","name":"Aesops Bagels","portion":"1","unit":"each"},{"date":"2011-03-21","meal":"BREAKFAST","category":"BREAKFAST BAKERY","recipe":"213032","name":"Whole Wheat Blueberry Muffin","portion":"1","unit":"each"},{"date":"2011-03-21","meal":"BREAKFAST","category":"BREAKFAST ENTREES","recipe":"061003","name":"Scrambled Eggs","portion":"4","unit":"oz"},{"date":"2011-03-21","meal":"BREAKFAST","category":"BREAKFAST ENTREES","recipe":"061041","name":"Egg Beaters","portion":"4","unit":"oz"},{"date":"2011-03-21","meal":"BREAKFAST","category":"BREAKFAST ENTREES","recipe":"061042","name":"Egg Whites","portion":"4","unit":"oz"},{"date":"2011-03-21","meal":"BREAKFAST","category":"BREAKFAST ENTREES","recipe":"061056","name":"Eggs Cooked to Order","portion":"1","unit":"each"},{"date":"2011-03-21","meal":"BREAKFAST","category":"BREAKFAST ENTREES","recipe":"061062","name":"Vegetable Frittata","portion":"1\/24","unit":"PAN"},{"date":"2011-03-21","meal":"BREAKFAST","category":"BREAKFAST ENTREES","recipe":"161049","name":"Hard Cooked Eggs","portion":"1","unit":"each"},{"date":"2011-03-21","meal":"BREAKFAST","category":"BREAKFAST MEATS","recipe":"089003","name":"Pork Sausage Pattie","portion":"2","unit":"each"},{"date":"2011-03-21","meal":"BREAKFAST","category":"MAKE OR BUILD YOUR OWN","recipe":"031003","name":"Oatmeal Steel Cut","portion":"6","unit":"fl. oz"},{"date":"2011-03-21","meal":"BREAKFAST","category":"MAKE OR BUILD YOUR OWN","recipe":"031008","name":"Grits","portion":"6","unit":"fl. oz"}])
----

=== recipes

To query the CS50 Food API for recipes, contact the server via URLs in
this format:

----
http://api.cs50.net/food/3/recipes?param1=value1&param2=value2&...
----

Supported parameters include:

[options=header]
|===
| `parameter` | description
| `key` | _Required._ Your API key.
| `id` | _Optional._ Comma-separated list of IDs of recipes to get.
| `output` | _Required._ Format for output. Must be `json`, `jsonp`,
or `xml`.
|===

If any parameters are malformed or any required parameters are omitted,
an empty response will be returned along with, possibly, HTTP status
code
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1[400 Bad
Request].

Among the fields returned will be a recipe's usual serving size and its
unit of measure.

==== JSON

If you request data in JSON format (e.g.,
`http://api.cs50.net/food/2/recipes?key=KEY&id=117003&output=json`, where `KEY` is your API key), the
response will be an array of objects, per the below:

[source,javascript]
----
[
   {
      "id":"117003",
      "name":"Chickwich",
      "size":"1",
      "unit":"each",
      "ingredients":"Chicken Patty (* INGREDIENT STATEMENT * Chicken breast with rib meat, water, vegetable protein product (isolated soy protein, magnesium oxide, zinc oxide, niacinamide, ferrous sulfate, vitamin B12, copper gluconate, vitamin A palmitate, calcium pantothenate, pyridoxine hydrochloride, thiamine mononitrate, riboflavin), dried whole egg, seasoning (salt, onion powder, modified corn starch, natural flavor), and sodium phosphates. BREADED WITH: Enriched wheat flour (enriched with niacin, ferrous sulfate, thiamine mononitrate, riboflavin, folic acid), water, enriched bleached wheat flour (enriched with niacin, ferrous sulfate, thiamine mononitrate, riboflavin, folic acid), salt, modified corn starch, spices, dextrose, garlic powder, oleoresin paprika and annatto, xanthan gum, and natural flavors. Breading set in vegetable oil.)",
      "VEGETARIAN":"FALSE",
      "VEGAN":"FALSE",
      "MOLLIE KATZEN":"FALSE",
      "LOCAL":"FALSE",
      "ORGANIC":"FALSE"
   }
]
----

===== JSONP

If you request data in JSONP format (e.g.,
`http://api.cs50.net/food/2/recipes?key=KEY&id=117003&output=jsonp&callback=parseResponse`, where `KEY` is your API key),
the response will be a padded array of objects, per the below:

[source,javascript]
----
parseResponse({"id":"117003","name":"Chickwich","size":"1","unit":"each","ingredients":"Chicken Patty (* INGREDIENT STATEMENT * Chicken breast with rib meat, water, vegetable protein product (isolated soy protein, magnesium oxide, zinc oxide, niacinamide, ferrous sulfate, vitamin B12, copper gluconate, vitamin A palmitate, calcium pantothenate, pyridoxine hydrochloride, thiamine mononitrate, riboflavin), dried whole egg, seasoning (salt, onion powder, modified corn starch, natural flavor), and sodium phosphates. BREADED WITH: Enriched wheat flour (enriched with niacin, ferrous sulfate, thiamine mononitrate, riboflavin, folic acid), water, enriched bleached wheat flour (enriched with niacin, ferrous sulfate, thiamine mononitrate, riboflavin, folic acid), salt, modified corn starch, spices, dextrose, garlic powder, oleoresin paprika and annatto, xanthan gum, and natural flavors. Breading set in vegetable oil.)","VEGETARIAN":"FALSE","VEGAN":"FALSE","MOLLIE KATZEN":"FALSE","LOCAL":"FALSE","ORGANIC":"FALSE"})
----

== Examples

where `KEY` is your API key

* Returns today's entire menu:
** `http://api.cs50.net/food/2/menus?key=KEY&output=json`
** `http://api.cs50.net/food/2/menus?key=KEY&output=jsonp&callback=parseResponse`
** `http://api.cs50.net/food/2/menus?key=KEY&output=xml`
* Returns today's lunch menu:
** `http://api.cs50.net/food/2/menus?key=KEY&meal=LUNCH&output=json`
** `http://api.cs50.net/food/2/menus?key=KEY&meal=LUNCH&output=jsonp&callback=parseResponse`
** `http://api.cs50.net/food/2/menus?key=KEY&meal=LUNCH&output=xml`
* Returns 21 March 2011's entire menu:
** `http://api.cs50.net/food/2/menus?key=KEY&sdt=2011-03-21&output=json`
** `http://api.cs50.net/food/2/menus?key=KEY&sdt=2011-03-21&output=jsonp&callback=parseResponse`
** `http://api.cs50.net/food/2/menus?key=KEY&sdt=2011-03-21&output=xml`
* Returns 21 March 2011's breakfast menu:
** `http://api.cs50.net/food/2/menus?key=KEY&meal=BREAKFAST&sdt=2011-03-21&output=json`
** `http://api.cs50.net/food/2/menus?key=KEY&meal=BREAKFAST&sdt=2011-03-21&output=jsonp&callback=parseResponse`
** `http://api.cs50.net/food/2/menus?key=KEY&meal=BREAKFAST&sdt=2011-03-21&output=xml`
* Returns a Chickwich's nutritional facts:
** `http://api.cs50.net/food/2/facts?key=KEY&recipe=117003&portion=1&output=json`
** `http://api.cs50.net/food/2/facts?key=KEY&recipe=117003&portion=1&output=jsonp&callback=parseResponse`
** `http://api.cs50.net/food/2/facts?key=KEY&recipe=117003&portion=1&output=xml`
* Returns a Chickwich's recipe:
** `http://api.cs50.net/food/2/recipes?key=KEY&id=117003&output=json`
** `http://api.cs50.net/food/2/recipes?key=KEY&id=117003&output=jsonp&callback=parseResponse`
** `http://api.cs50.net/food/2/recipes?key=KEY&id=117003&output=xml`

////
== Implementations

* http://chrome.google.com/extensions/detail/kolkghlafoledmpdmpgjahlcehclkbpa[HUDS
Daily Menu], by Filip Zembowicz. "This Chrome extension allows easy
access to the daily menu right from the browser -- it's really
convenient since you don't have to look through the web site, and it's
just a tiny icon right next to your address bar."
////

== External Links

* http://en.wikipedia.org/wiki/Comma-separated_values[Comma-separated values]
* http://en.wikipedia.org/wiki/JSON[JSON]
* http://en.wikipedia.org/wiki/JSON#JSONP[JSONP]
* http://en.wikipedia.org/wiki/XML[XML]
* http://en.wikipedia.org/wiki/Web_scraping[Web scraping]

== Changelog

* 1.1
** Added support for JSONP.
* 1.2
** Added support for XML.
* 1.3
** Complete overhaul. Added nutritional facts. Added recipes. Added
support for ranges of dates for menus.
* 2
** Migrated to `api.cs50.net`.
** Added requirement of API key.

---
tags: []
title: anonymous_function
---
An *anonymous function* is a function without a name associated with it.
Anonymous functions are used in a variety of contexts; for example, they
can be passed as arguments to another function. You're most likely to
encounter anonymous functions in JavaScript, but they also exist in PHP.

[[]]
Detailed Description
~~~~~~~~~~~~~~~~~~~~

Anonymous functions are declared just like normal functions, except that
the name is not given. For example, the following is a legal (if
useless) JavaScript anonymous function:

-------------------------
function(x) { return x; }
-------------------------

You can assign anonymous functions to a variable and then use that
variable just like a function:

-------------------------------------
var func = function(x) { return x; };
alert(func(2)); // 2
func = function(x) { return x * x; };
alert(func(2)); // 4
-------------------------------------

You can also pass an anonymous function as an argument:

-------------------------------------------------
function alertplus(x, func) {
    alert(func(x));
}
alertplus(2, function(x) { return x * x; }); // 4
-------------------------------------------------

PHP anonymous functions work similarly:

---------------------------------------------------
$func = function($x) { return $x; };
echo $func(2); // 2
$func = function($x) { return $x * $x; };
echo $func(2); // 4
function echoplus($x, $func) {
    echo $func($x);
}
echoplus(2, function($x) { return $x * $x; }); // 4
---------------------------------------------------

[[]]
Examples
~~~~~~~~

[[]]
JavaScript
^^^^^^^^^^

Anonymous functions are heavily used in JavaScript. In this example ,
which heavily uses jQuery, three nested anonymous functions are used as
handlers for various events:

---------------------------------------------
$(document).ready(function() {
    $("#form").submit(function() {
        $.ajax({
            url: "quote3.php",
            data: { 
                symbol: $("#symbol").val()
            },
            success: function(data) {
                $("#price").html(data.price);
                $("#high").html(data.high);
                $("#low").html(data.low);
            }
        });
        return false;
    });
});
---------------------------------------------

The outermost function is in a `$(document).ready` block, so that it
gets executed when the document is ready. This function installs a
handler that gets called when the form with id "form" is submitted. The
handler does an Ajax request, and uses another anonymous function as the
handler that gets called when the Ajax request is successful.

It isn't syntactically necessary to use anonymous functions here. This
code could also have been written like this:

------------------------------------------
function readyfunction() {
    $("#form").submit(formsubmitfunction);
}
function formsubmitfunction() {
    $.ajax({
        url: "quote3.php",
        data: { 
            symbol: $("#symbol").val()
        },
        success: successfunction
    });
    return false;
}
function successfunction(data) {
    $("#price").html(data.price);
    $("#high").html(data.high);
    $("#low").html(data.low);  
}
$(document).ready(readyfunction);
------------------------------------------

However, this syntax does not make the structure of the program as
clear, and it quickly becomes unwieldy to have named functions when
you're using more than one form or handler.

[[]]
PHP
^^^

In this example, the
http://www.php.net/manual/en/function.usort.php[usort] function is used
to sort an array with a custom sort function, which is implemented as an
anonymous function.

--------------------------------------------------------------------------------------------------------------------------------------------------
$houses = array("Adams", "Currier", "Eliot", "Quincy", "Kirkland", "Cabot", "Leverett", "Lowell", "Mather", "Dunster", "Pforzheimer", "Winthrop");
usort($houses, function($in1, $in2) {
    // Mather always comes first
    if($in2 === 'Mather')
        return 1;
    else if($in1 === 'Mather')
        return -1;
    else
        return strcmp($in1, $in2);
});
print_r($houses); // Mather is first, and the rest is sorted alphabetically
--------------------------------------------------------------------------------------------------------------------------------------------------

This could also have been implemented putting the function in a
variable:

--------------------------------------------------------------------------------------------------------------------------------------------------
$houses = array("Adams", "Currier", "Eliot", "Quincy", "Kirkland", "Cabot", "Leverett", "Lowell", "Mather", "Dunster", "Pforzheimer", "Winthrop");
$sortfunction = function($in1, $in2) {
    // Mather always comes first
    if($in2 === 'Mather')
        return 1;
    else if($in1 === 'Mather')
        return -1;
    else
        return strcmp($in1, $in2);
};
usort($houses, $sortfunction);
print_r($houses); // Mather is first, and the rest is sorted alphabetically
--------------------------------------------------------------------------------------------------------------------------------------------------

Category:Glossary

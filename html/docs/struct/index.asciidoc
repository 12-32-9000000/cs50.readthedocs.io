---
tags: []
title: struct
---
A `struct` is a user-defined data structure in C that encapsulates
related variables. Recall our definition of the `student` user-defined
type for the use of `structs1.c` and `structs2.c`:

[code,C]
-----------------------------------
// structure representing a student
typedef struct
{
    int id;
    char *name;
    char *house;
}
student;
-----------------------------------

Here, we define a student as an entity having an id, a name, and a
house. It makes sense to bundle these variables together since they are
all related to a single student. If we didn't use a `struct`, we might
have to use a series of arrays, one each for id's, names, and houses, or
else systematically name our variables so that we could keep track of
them (e.g. `name1`, `name2`). These other two options are messy in
comparison to using the `struct` type.

In the definition above, we use the `[[typedef]]` keyword so that we can
declare new `student` variables in shorthand. Without the use of
`typedef`, we would have to write `struct student foo` rather than
`student foo` when we wanted to declare a new variable named `foo`.

Under the hood, a `struct` is stored as a single chunk of memory, but
because of optimizations, it may take up more space than the sum of all
the variables it contains. For example, a `student` should theoretically
take up no more than 12 bytes (4 each for an `[[int]]` and the two
link:pointer[pointers] to strings), but it may take up more. You can see
for yourself by using the `[[sizeof]]` operator.

The notation for accessing the variables within a `struct` is as
follows:

[code,C]
-----------------------------------------------------
student foo;

foo.id = 5;
foo.name = "Andrew Sellergren";
foo.house = "Winthrop";

printf("%s lived in %s House.", foo.name, foo.house);
-----------------------------------------------------

A dot operator is used to get and set the properties within a `struct`.
The arrow operator can be used when working with pointers to `struct`'s:

[code,C]
-----------------------------------------------------------
student *foo = malloc(sizeof(student));

foo->id = 5;
foo->name = "Andrew Sellergren";
foo->house = "Winthrop";

printf("%s lived in %s House.", foo->name, foo->house);
printf("%s lived in %s House.", (*foo).name, (*foo).house);
-----------------------------------------------------------

The last two lines above will print the same thing since the arrow
operator is shorthand for the dereferencing operator followed by the dot
operator. The arrow operator is particularly useful in the context of
link:linked lists[linked lists].

Category: Week 4[Category: Week 4]

---
tags: []
title: nano
---

image:Nano.png[The interface of the nano editor.,title="image"]`nano`is
a keyboard-based editor in Linux (similar to Notepad in Windows and
TextEdit on a Mac) that can be used to create and edit text files. It
does not have as many features as Vim or emacs (other text editors in
Linux), but it is more beginner-friendly and less overwhelming than
these other editors.

[[]]
Starting nano
-------------

At the command line interface, typing "`nano`" brings up a blank file.
If instead you type "`nano filename`", first the system will search the
current directory for a file with the name "filename," and if it finds
the file it will open the file and you will be able to edit the file
from the last time it was saved. If the file named "filename" is not
found, nano will open up a blank file, but whenever you try and save,
"filename" will already be filled out as the default name for you to
save the file, so you do not have to type it again. In the image to the
right, you can see at the top that this new file ("New File" is
indicated near the bottom of the screen) has been opened with the name
"thisisCS50.c".

A useful flag when using nano to edit an already existing file is "-B".
This automatically backs up the previous version of the file when you
save over it. For example, if we have a program called "skittles.c" in
the current directory, open it up for editing by typing
"`nano skittles.c -B`", and then save over the old file, the original
skittles.c can be found in the new file named "skittles.c~", while
skittles.c contains the most recent version of the file. This is useful
if we find out we have messed up the program and wish to revert to an
original version.

[[]]
Using nano
----------

image:Nano2.png[Nano2.png,title="image"]Because nano is a keyboard-based
editor, one thing that beginners must get used to is that one cannot
click on the screen in order to place the cursor (the green square in
the images) at the desired location. Instead, the arrow keys must
generally be used to move the cursor around.

Typing in nano is simple: enter, backspace, delete, and other characters
all work as expected. One thing to note, however, is that word-wrapping
may or may not occur. On `cloud.cs50.net`, word-wrapping is *not* the
default behavior. Instead, typing will continue beyond the screen, and
focus will move over to the right. The $ sign on the left side of the
line (pointed to by the blue arrow in the image to the right) indicates
that there is more text to the left and that our current view of the
text is shifted to the right. However, it is generally better style to
have all lines in the file 80 characters or less in length so that all
text stays in the screen and no scrolling to the right is necessary (80
characters is the default width for many command line windows). As can
be seen in the image to the right circled in green, the number of
characters in the line (indicated by the `col` number; the `char` number
to the right indicates total characters in the file) is greater than 80,
which is why the view is shifted to the right.

[[]]
Syntax highlighting
-------------------

Nano has http://en.wikipedia.org/wiki/Syntax_highlighting[syntax
highlighting] for various different file types, such as .php, .java,
.html, and .c files. Different highlighting is applied to the various
file types since languages tend to have unique sets of keywords. If you
open a file in nano with a .c extension, nano will know to apply syntax
highlighting that is relevant to the C programming language, since files
programmed in C are typically saves with the .c extension. This adds an
additional advantage to opening new files by typing "`nano filename.x`",
where "x" is the file type, at the command line: nano can apply syntax
highlighting relevant to the file type from the first thing you type, as
opposed to only being able to apply the highlighting when you save your
program for the first time.

[[]]
Commands
--------

When you open nano, you can see various commands that nano allows along
the bottom of the screen (click image above to zoom in).

For example, as we can see at the bottom of the screen, typing ^X exits
nano (^ means the control key, and thus to exit you type Ctrl+X). Nano
is *not* case-sensitive with respect to the control commands. Therefore,
typing ^x or ^X both have the same effect - exiting the program. If
changes have been made to the file, you will then be asked whether you
want to save the modified buffer, which is simply asking whether you
wish to save the changes. Typing "n" results in quitting the program
without saving, typing "^C" cancels the exiting process and allows you
to edit the file again, and typing "y" then asks what you want to call
the program (if you started nano with a file name at the command line,
that file name will already be written out at this question, whether or
not the file was actually found).

Other useful commands include:

[cols=",",]
|=======================================================================
|^O |Save your file without exiting nano.

|^W |Search for an inputted string in your program. To search for the
next occurrence of the string, press ^W and enter again.

|^W^T |(Press Ctrl+W then Ctrl+T) Goes to the entered line number. This
is useful when the compiler tells you that there is an error on, say,
line 654. You can simply skip to line 654 instead of having to scroll
down.

|^W^R |Replaces instances of the first string inputted with the second.
For example, if you choose a bad variable name such as "x", you can
easily replace them with this function with a better name such as
"dollars". Be careful when using replace all, however: if you have a
variable called "extra_coins", replacing all "x"s as in the previous
example would result in all the variables being renamed
"edollarstra_coins" (this applies to any other "x" in the program as
well). Since all "extra_coins" variables would be renamed this, the
program would still work, but it certainly isn't a variable name one
should use.

|^K and ^U |^K cuts a full line of text, whereas ^U pastes the line
back. You can cut multiple lines in a row by continuously pressing ^K
and paste them all with ^U multiple times, but if you hit ^K multiple
times, then press any other key (even moving the cursor), then use ^K
again and try to paste, only that last cut line will be pasted, and the
other lines will be lost.

|^Y and ^V |Scroll up and down the page, respectively. Much faster for
longer files than simply using the up and down arrow keys.
|=======================================================================

[[]]
`.save` files
-------------

If you have been using nano, you may see files with the ".save" file
extension appearing in directories in which you are working. If you are
editing a file (let's call it "hello.c") and somehow your connection to
`cloud.cs50.net` is lost, whether because you closed the terminal window
or you lost your connection to the internet or some other unknown
reason, nano will automatically save a backup of the state of the file
in a new file with a ".save" extension (e.g. "hello.c.save"). So, when
you log back onto `cloud.cs50.net`, don't worry that you've lost
everything you've been working on because you hadn't saved for an
extended period of time, you can simply open up the ".save" file and
then continue from where you left off, and when you go to save the file,
you can save it with the name of the original file (without the ".save"
extension). Don't rely entirely on this though, such as thinking you can
just close your terminal window without saving because nano has got you
covered, because in a very few cases the file is not correctly created.

If a ".save" file already exists and you open up the file without the
".save" extension, and your connection is lost again, nano will save the
file with a ".save.1" file extension, incrementing the number at the end
of the extension for each time. If you have open a file without a name
and lose your connection, the file will automatically be saved with the
name "nano.save".

If you don't need the ".save" files, feel free to remove them.

Category:HOWTOs

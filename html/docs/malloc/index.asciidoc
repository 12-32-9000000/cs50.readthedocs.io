---
tags: []
title: malloc
---
`[[malloc]]` is a function in C that dynamically allocates memory to the
program in which it is called. It takes as its only argument a numeric
value of bytes and returns a pointer to a chunk of memory with the
requested number of bytes or else `NULL` if the operating system doesn't
have enough memory to fulfill the request.

`malloc` gives a program the address of memory on the heap that it can
use. In contrast, declaring and initializing a variable uses memory on
the stack. For example, `foo` is stored on the heap whereas `bar` is
stored on the stack:

[code,C]
---------------------------------------
int *foo = (int *) malloc(sizeof(int));
*foo = 6;

int bar = 6;
---------------------------------------

Here, we use `malloc` to ask the operating system for enough memory to
store an `[[int]]`. We could've just as easily written `malloc(4)`, but
the code above is more robust and could potentially be ported to a
64-bit architecture, where an `[[int]]` requires 8 bytes of memory.

In the example above, we also cast the return value of `malloc` to a
`int *`. This isn't strictly necessary, but technically speaking,
`malloc` returns a pointer of type `void *`, which can become a pointer
to all different data types. We cast it for the sake of being explicit.

Clearly, the use of `malloc` is more complicated than a simple
declaration of a variable. As we saw above, it was much simpler to
initialize `bar` than `foo`. So why use `malloc` at all, then? `malloc`
allows for _dynamic_ memory allocation. That is, when we don't know how
much memory our program will need at the time we write its source code,
we use `malloc` so that the program can ask for memory on its own behalf
at runtime. Consider the case of `[[GetString]]` from the CS50 Library.
A programmer can't possibly know at the time he writes his program the
length of the string that the user will provide when prompted. By using
`[[GetString]]` which in turn uses `malloc`, the programmer can be sure
that his program has enough memory (and not too much more) to store the
user's input.

As a matter of good programming practice, every chunk of memory that is
granted to a program by `malloc` should be explicitly released when the
program is finished with it via a call to the `free` function:

[code,C]
----------
free(foo);
----------

Programs which fail to free the memory that they're not using anymore
are said to have memory leaks which can cause an operating system to
become sluggish and unresponsive.

Category: Week 4[Category: Week 4]

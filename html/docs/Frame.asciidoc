---
tags: []
title: Frame
---
A frame is a conceptual building block of the stack. At the bottom of
the stack is the frame that corresponds to `main`. When `main` calls a
function, another frame is pushed onto the stack. If the function that
`main` called calls another function, another frame is pushed onto the
stack. Basically, the stack has a frame for every function that has not
yet executed a `return` statement.

A frame contains three things: the function's local variables, the
caller function's return address, and the arguments passed in by the
caller function.

It's important to note that a frame is only a conceptual boundary
between chunks of memory on the stack. That is, there's nothing stopping
a function from accessing the memory of another frame so long as it
knows the valid address of that frame. This is why our working version
of `swap` was able to permanently modify `main`'s local variables when
we passed pointers to them as arguments. `swap` could access `main`'s
frame because it knew where to find it in memory.

Frames do not have a fixed size. However, they do take up a non-zero
amount of memory. This is why if a recursive function calls itself too
many times, your program will run out of memory; if the stack has too
many frames, it will collide with the heap and cause a segmentation
fault.

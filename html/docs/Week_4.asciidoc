---
tags: []
title: Week_4
---
_Merge sort. Dynamic memory allocation. Stack and heap.Â  Pointers._

[[]]
Agenda
------

* Announcements
** Attend or watch Problem Set 4's walkthrough on Sun 10/3, 7pm - 8:30pm
in Harvard Hall 201; video will be up by Tue 10/5, if not sooner.
** Problem Set 1's and 2's feedback and scores have been returned.
** Expect Problem Set 3 feedback and scores by Fri 10/8.
** Quiz 0 coming up on Wed 10/13; details to be announced in lecture
this week. See past years' quizzes at
http://www.cs50.net/quizzes/[cs50.net/quizzes].
** Take advantage of http://help.cs50.net/[help.cs50.net].
* Merge Sort
** _O_(_n_ log _n_)
** recursion
* Pointers
** `string` actually means `char *`, but what does that mean?
** What's `NULL`? (A _pointer_ whose value is `0`, which implies that it
"points to nothing.")
** What's `'\0'`? (A `char` that demarks the end of a string.)
** Passing by reference (versus value).
* Stack versus heap
* `malloc`, `free`

_Consider showing and explaining
http://cslibrary.stanford.edu/104/[Binky Pointer Fun Video], which we
saw in Week 4's last lecture, again._

[[]]
References
----------

* http://cdn.cs50.net/2009/fall/sections/4/section4.pdf[Section Notes],
Fall 2009
* http://cdn.cs50.net/2009/fall/sections/4/section4.flv?play[Video],
Fall 2009

[[]]
Materials
---------

[[]]
Mike Teodorescu
~~~~~~~~~~~~~~~

*Fall '09*:

:* In between Media:Section3.pdf[Section Lesson Plan]. If you wish to
use portions of these slides or the slides in full please keep the
attribution to me and add a footer "prepared by Mike Teodorescu".

[[]]
link:Rose's Section[Rose Cao]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Fall '09*:

:* Less Comfy Media:RcaoSection3.ppt[PowerPoint Slides]

:** the "video" mentioned was Blinky's Fun w/ Pointers...which was
already shown in lecture

:** Couldn't embed the font(s), font size might be off with Arial; will
have the font pack up somewhere if you're curious

*Source Code* (partial): These are just different ways of presenting the
same thing (+/- user interactivity). Can be used to show pointer
arithmetic and how the array name is just a pointer to the first element
of the array.

:* Media:RcaoWeek4src.zip[Source Code]

:** _arrPeek.c_:

:*** Takes one command line argument, either "int" or "string" ('i' or
's' works just as well). Then prompts for either ints to put into an
array (ctrl+d to signal finished input) or a string.

:*** Prints a visual of the array, prompting for an index to "peek"
into.

:*** Prints that index's element and address.

:** _arrDissect.c_

:*** Does pretty much the same as the above, except doesn't prompt for
an index to look into and prints all elements and addresses instead.

:*** Can take a second cmd-line arg, 0, to avoid printing the array name
address all the time

:** _strings.c_ (poor name, yes):

:*** Prompts for a string

:*** Prints each of the elements (chars) and its address; not as
compelling as seeing the address increase by 4 bytes for ints

[[]]
Josh Bolduc
~~~~~~~~~~~

Media:Jbolduc week4.zip[Source code] -- few examples with pointers

[[]]
Matthew Chartier
~~~~~~~~~~~~~~~~

:* Media:Week4sourcecodeMatt.zip[Source Code]

:** _arraypointers.c_

:*** Demonstration of equivalence between arrays and pointers.

:** _checkwork.c_

:*** Generates and prints out answers to pointer exercise from Fall 2009
section notes in a nice table.

:** _malloc.c_

:*** Dynamically allocates some memory, prints out the garbage content,
then frees it.

:** _pointers.c_

:*** Declaring and dereferencing pointers.

:* Pointer Fun

:** http://www.qwantz.com/index.php?comic=548[Dinosaur Comics]

:** http://xkcd.com/138/[xkcd]

[[]]
User:lloyd[Doug Lloyd]
~~~~~~~~~~~~~~~~~~~~~~

I have always taught a section "for those less comfortable". Here is my
"cheat sheet" for Media:CheatSheet4.pdf[Week 4]. 2010 was the first year
I made these, and I intend to hand them out (1) after section (2) only
to those people who actually attended. These are intended as a two-page
capsule summary of important topics. The goal is to refresh students'
minds on these for quiz-preparation purposes, ie. to remember the syntax
of a loop. If other TFs intend to use them, please keep the attribution
to me, and just send me an email saying that you are using them. These
were prepared using LaTeX.

I also have some Media:Wk4.pdf[sample programs] to demonstrate the
basics of pointers, dynamic memory allocation, structs, and typedef.

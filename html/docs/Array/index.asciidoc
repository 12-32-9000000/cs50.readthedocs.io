---
tags: []
title: Array
---
An *array* is a data structure which stores multiple values of the same
data type in contiguous memory and allows random access to its elements.
By "random access," we mean that any element in the array can be
immediately retrieved if its index is known.

The notation for declaring an array in C is as follows:

code,C---------------------- code,C
#define SIZE 6

int quiz_scores[SIZE];
----------------------

Here, we declare an array called `quiz_scores` which stores 6 elements
of type `[[int]]`. Storing quiz scores in the same data structure makes
sense because it gives us flexibility in the event that the number of
quiz scores we want to store changes. In that case, we need only change
the value of `SIZE` to accommodate our new requirements.

As always, it's a good idea to initialize our link:variable[variables]
as soon as we declare them:

code,C---------------------------- code,C
#define SIZE 6

int quiz_scores[SIZE] = {0};
----------------------------

Writing just one value between curly braces tells the compiler to insert
this value as all of the elements in the array.

To access the elements of the array, either to set or to get them, we
use bracket notation:

code,C----------------------------------- code,C
#define SIZE 6

int quiz_scores[SIZE] = {0};

for(int i = 0; i < SIZE; i++)
{
    quiz_scores[i] = GetInt();
}

for(int i = 0; i < SIZE; i++)
{
    printf("%d\n", quiz_scores[i]);
}
-----------------------------------

Because arrays store their elements in contiguous memory, we can also
use pointer arithmetic to access them. The lines of code above are
equivalent to the following:

code,C------------------------------------- code,C
#define SIZE 6

int quiz_scores[SIZE] = {0};

for(int i = 0; i < SIZE; i++)
{
    *(quiz_scores + i) = GetInt();
}

for(int i = 0; i < SIZE; i++)
{
    printf("%d", *(quiz_scores + 1));
}
-------------------------------------

Interestingly, we can think of link:string[strings] as being arrays of
`char`'s, so we can access each of the characters using bracket
notation. The following lines of code print out each of the characters
in the string:

code,C----------------------------------------- code,C
char *s = "Foo";

for(int i = 0, n = strlen(s); i < n; i++)
{
    printf("%c\n", s[i]);
}
-----------------------------------------

Arrays can be multi-dimensional, as we saw while implementing the Game
of Fifteen. To declare a multi-dimensional array, simply write multiple
sets of brackets after the array name. The following declares a
three-dimensional array, for example:

code,C---------------------- code,C
int 3d_array[2][2][2];
----------------------

Category:Week 0[Category:Week 0] Category:Week 2[Category:Week 2]

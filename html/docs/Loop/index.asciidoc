---
tags: []
title: Loop
---

A loop is simply a way of executing some code multiple times in a row. C
gives us three main types of loops: while loops, do-while loops, and for
loops. Usually (and with experience), you'll find that different types
of loops will be better suited for different purposes, but the usage of
each is very similar.

[[]]
while
~~~~~

A while loop has two components: a _condition_ that must evaluate to
true in order for the loop to execute, and the code itself that you'd
like to execute repeatedly. It generally looks something like this:

[code,c]
----------------------
while (condition)
{
    // code to execute
}
----------------------

What happens when we reach a while loop in our code? First, we check the
condition: if the condition evaluates to true, we proceed by running the
code block that follows. Once that code executes, we go back to the
condition and see if it's still true--if it is, we execute the code
block again, check the condition again, etc. Only once the condition
evaluates to false do we finally stop iterating through the loop.

Note that the condition need not ever evaluate to true--if the condition
is already false the first time we check it, our program will simply
skip the corresponding block of code altogether.

Here's a very simple while loop:

[code,c]
-----------------------
while (true)
{
    printf("hello!\n");
}
-----------------------

In this example, our condition, `true`, will necessarily always evaluate
to true--so this loop will run forever! This is called an _infinite
loop_, and it's often not what we want (nor is it as easy to identify as
this!). (If you do find yourself stuck in an infinite loop, though, know
that you can always press Ctrl+C on the command line to stop your
runaway program!)

Here's a more functional example of a while loop:

[code,c]
----------------
int i = 0;
while (i < 5)
{
    printf("*");
    i++;
}
----------------

Our condition, `i < 5`, will evaluate to true as long as the variable
`i` has a value less than 5. Since `i` starts out with the value 0, and
we increment `i` once per loop iteration, this means this loop will
iterate through five times and print five stars to the screen. (What
would the output be if we started with `i = 1` instead? What if we
removed the line `i++`?)

[[]]
do-while
~~~~~~~~

A do-while loop is almost exactly like a while loop, with one key
functional difference: a do-while loop is guaranteed to execute at least
one iteration, even if your condition initially evaluates to false. The
syntax is also slightly different:

[code,c]
----------------------
do
{
    // code to execute
} while (condition);
----------------------

Here's our star-printing example from above, this time using a do-while
loop:

[code,c]
----------------
int i = 0;
do
{
    printf("*");
    i++;
} while (i < 5);
----------------

Although this example will have the same output as the while loop above,
note that the condition (`i < 5`) won't be checked until `i` is 1, after
the first iteration of the loop completes.

Why use a do-while loop instead of a while loop? Truth be told, you
won't need to very often. But one good use for do-while loops is getting
user input:

[code,c]
-----------------------------------------------------
int n;
do
{
    printf("Give me an integer between 1 and 100: ");
    n = GetInt();
} while (n < 1 || n > 100);
-----------------------------------------------------

This example will make sure that the user provides an integer between 1
and 100. Note that our condition tests for _invalid_ input--if our
condition is true, we want to keep prompting the user until he or she
provides us with valid input. Since we're using a do-while loop, we'll
always ask the user for input at least once. If the user gives us an
integer between 1 and 100 (inclusive), our condition will evaluate to
false, and the loop will stop running. If the user gives us an invalid
integer, however, the condition will evaluate to true, so we'll continue
to loop over and over until the user complies.

[[]]
for
~~~

A for loop is similar to a while loop in function, but its syntax is
somewhat different. In addition to a condition, you can provide some
_initialization_ and a _modifying statement_. Here's the basic syntax:

[code,c]
----------------------------------------------------
for (initialization; condition; modifying statement)
{
    // code to execute
}
----------------------------------------------------

The initialization is run exactly once, before the loop begins to
execute the first iteration. The condition is checked before each
iteration just like in a while loop--if the condition evaluates to
false, the loop stops iterating. The modifying statement simply executes
after each loop iteration.

The most common use of a for loop is to use the initialization to assign
a variable a value and the modifying statement to increment (or
decrement) it. A common convention is to use the variable name `i` here
to keep track of loop iterations. This makes it very convenient to write
a loop that runs a specified number of times, like our star-printing
example from above:

[code,c]
---------------------------
for (int i = 0; i < 5; i++)
{
    printf("*");
}
---------------------------

This code is functionally identical to the equivalent while loop, but is
more elegant and compact. Note that with C99, you can declare and
initialize a variable (`int i` above) within the loop initialization,
but bear in mind that such variables will be scoped within the loop--you
won't be able to access them again once your loop terminates.

Note that you can nest loops within each other:

[code,c]
-------------------------------
for (int i = 0; i < 5; i++)
{
    for (int j = 0; j < 5; j++)
    {
        printf("*");
    }
    printf("\n");
}
-------------------------------

(What will this example print out?)

In a nested loop, we usually use `j` (instead of `i`) as our loop
counter; in a doubly-nested loop, we'll use `k`.

[[]]
break and continue
~~~~~~~~~~~~~~~~~~

Sometimes you might want to stop a loop prematurely, even if your loop
condition would still evaluate to true. Or you might want to stop only a
particular iteration of the loop, but still continue running the loop.
You can do both of these things with the `break` and `continue`
keywords, respectively.

[[]]
break
^^^^^

The keyword `break` exits out of your loop altogether. Consider this
(silly) example:

[code,c]
---------------------------
for (int i = 0; i < 5; i++)
{
    printf("*");
    break;
}
---------------------------

This example will only print out one star! When we run into `break` in
the very first iteration, we break out of the loop entirely and stop
iterating, even though at this point `i` is still 0. This isn't a very
useful use of `break`, since we don't need a loop at all in this case. A
slightly more interesting example is this:

[code,c]
--------------------------------------------------------------------
for (int i = 0; i < 5; i++)
{
    printf("Give me a positive integer if you would like a star: ");
    if (GetInt() <= 0)
    {
        break;
    }
    printf("*\n");
}
printf("No more stars.\n");
--------------------------------------------------------------------

Here, we continue looping as long as the user requests more stars, or
until we print five stars--whichever comes first. But once a user
decides they don't want any more stars (as by providing a negative
integer or 0), the loop will terminate altogether--they won't be asked
again.

[[]]
continue
^^^^^^^^

The `continue` keyword is similar to break, but it only stops a single
iteration of the loop. The program will immediately execute the
modifying statement (as it does after every loop iteration) and check
the condition to see if it should terminate or not.

[code,c]
---------------------------
for (int i = 0; i < 5; i++)
{
    printf("*");
    continue;
}
---------------------------

This is a very useless example of `continue`, since it acts just like a
normal loop--it only stops each loop iteration once it's about to finish
anyway. Here's another example:

[code,c]
--------------------------------------------------------------------
for (int i = 0; i < 5; i++)
{
    printf("Give me a positive integer if you would like a star: ");
    if (GetInt() <= 0)
    {
        continue;
    }
    printf("*\n");
}
printf("No more stars.\n");
--------------------------------------------------------------------

This is like the example with `break` above, with one key difference:
since we `continue` rather than `break` when we receive a negative
integer or zero, this loop will always run exactly five times (even if
it doesn't print five stars).

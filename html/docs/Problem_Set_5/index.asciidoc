---
tags: []
title: Problem_Set_5
---

*Deadline: Fri 10/29, 5:00am*

` Between us, this problem set should be graded tougher than past problem sets.  It's time to push your students to write the best possible code, so do call them out on absolutely anything that could be improved.  Especially if you have nitpicks with style, award no more than 4/5 for that axis.  Incentivize your students to really strive for perfection.  Don't worry about being too "tough" on your students; grades will be normalized at term's end.`

For this problem set, you should do the below:

1.  Fetch your students' and render PDFs on the cloud.
2.  Grab copies of the *cs50/2010/pset5/username* and
*cs50/2010/hacker5/username* Google Spreadsheets. Hover over Column A
cells that have orange triangles to see comments.
3.  Assign Correctness, Design, and Style scores in each. Note
questions.txt is factored into Correctness; the yellow row is for
administrative purposes only. Only record the green rows in your
gradebook as usual.
4.  Record grades at http://www.cs50.net/tools/[cs50.net/tools].
5.  Email your students their PDFs.
6.  *SFTP your PDFs to ~cs50/staff/pdfs/username/5/standard/ and
~cs50/staff/pdfs/username/5/Hacker/ on the cloud, where username is your
username.*

[[]]
How to Fetch and Render
^^^^^^^^^^^^^^^^^^^^^^^

---------------------------------
export PATH=~cs50/staff/bin:$PATH
mkdir both5
fetch pset5 both5
fetch hacker5 both5
render pset5 both5/*.pset5
render hacker5 both5/*.hacker5
---------------------------------

[[]]
How to Run Grading Scripts
^^^^^^^^^^^^^^^^^^^^^^^^^^

*email mailto:mtucker@eecs.harvard.edu[Mike Tucker] with questions*

For this Problem Set there is no specific grading script for the hacker
version. There are three programs to be graded - whodunit, resize, and
recover. The grading scripts will run whodunit for you, but you are on
your own to look at the output file and determine if it is correct or
not. However, the scripts will do their best to efficiently grade the
other two programs for you. Assuming your student hasn't done something
crazy, you should cd into their submission directory (which should
contain `bmp` and `jpg` subdirectories and run:

-------------------------------------------------------
 ~mtucker/personal/scripts/trunk/pset5-scripts/pset5.pl
-------------------------------------------------------

[[]]
Details (or, How does this all work?)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To get things set up, the perl scripts rely on two helper scripts that
do all the real work

--------------------------------------------------------------
 ~mtucker/personal/scripts/trunk/pset5-scripts/check-resize.pl
--------------------------------------------------------------

and

---------------------------------------------------------------
 ~mtucker/personal/scripts/trunk/pset5-scripts/check-recover.py
---------------------------------------------------------------

As with previous grading scripts, these scripts build the student's
programs and run them against a set of inputs checking the output/output
files/return codes against the solution set's answers. The test cases
have been chosen to cover the criteria that are in the grading
spreadsheet, though if you find *other* issues in your students code
please be sure to send Mike the test cases so he can integrate them into
the framework.

If you have any questions about the output of the scripts or find any
interesting cases that were not covered, please let me know ASAP!

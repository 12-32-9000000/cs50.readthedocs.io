---
tags: []
title: HarvardCourses_API
---
The HarvardCourses API allows you to request data programmatically from
http://courses.cs50.net/[HarvardCourses] in
http://en.wikipedia.org/wiki/Comma-separated_values[CSV],
http://en.wikipedia.org/wiki/JSON[JSON],
http://en.wikipedia.org/wiki/JSON#JSONP[JSONP],
http://php.net/manual/en/function.serialize.php[serialized PHP], or
http://en.wikipedia.org/wiki/XML[XML] format. The API provides a
http://en.wikipedia.org/wiki/Representational_State_Transfer[RESTful]
interface, which means that you can query it using simple HTTP requests.

At least once per day, CS50 synchronizes with the
http://www.registrar.fas.harvard.edu/fasro/courses/index.jsp?cat=ugrad&subcat=courses[Courses
of Instruction]. Because FAS offers so many courses, this API tends to
return a lot of data. For performance's sake, you yourself should cache
your own copy locally and synchronize with this API once per day.

This API does not provide Q data, but you may request a dump of Q data
(three SQL tables) at
https://www.cs50.net/q/request[cs50.net/q/request].

[[]]
Author
------

To report bugs or request features, contact:

mailto:malan@harvard.edu[David J. Malan '99] +
http://www.cs.harvard.edu/malan/

[[]]
License
-------

Use of this API is governed by a
http://creativecommons.org/licenses/by-nc/3.0/[Creative Commons
Attribution-Noncommerical 3.0 Unported] license, which means that you
may use its data for non-commercial purposes so long as you attribute
your data to this API, as by including a link to
http://courses.cs50.net/[HarvardCourses] in your own work. To discuss
commercial purposes, contact the author.

[[]]
Methods
-------

All methods support
http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing[CORS].

[[]]
courses
~~~~~~~

To query the HarvardCourses API for courses, contact the server via URLs
in this format:

`http://api.cs50.net/courses/1.0/courses?param1=value1&param2=value2&...`

Supported parameters include:

[cols=",",options="header",]
|=======================================================================
|parameter |description
|`cat_num` |_Optional._ A comma-separated list of catalog numbers. Only
courses with those catalog numbers will be returned.

|`faculty` |_Optional._ A comma-separated list faculty members' IDs.
Only courses taught by at least one of them will be returned.

|`field` |_Optional._ A comma-separated list fields' IDs. Only courses
in those fields will be returned.

|`output` |_Required._ Format for output. Must be `csv`, `json`,
`jsonp`, `php`, or `xml`.

|`q` |_Optional._ Query string. Only courses whose catalog number,
field, number, title, and/or description contain the string will be
returned. Be sure to URL-encode this parameter's value (as with PHP's
http://php.net/manual/en/function.urlencode.php[urlencode]).

|`term` |_Optional._ Must be `FALL` or `SPRING`.
|=======================================================================

If any parameters are malformed or any required parameters are omitted,
an empty response will be returned along with, possibly, HTTP status
code
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1[400 Bad
Request].

A course offered both in the fall and in the spring will be returned as
two separate courses, in order that `faculty`, `meetings`, `building`,
and/or `room` might differ. You should thus consider the primary key of
this method's result set to be joint on `cat_num` and `term`.

If a course is taught by multiple faculty some term, `faculty` will be a
comma-separated list of faculty IDs.

Beware that `cat_num` may contain leading zeroes for historical reasons,
so be sure to treat it as a string, not as an integer.

[[]]
CSV
^^^

If you request data in CSV format (e.g.,
http://api.cs50.net/courses/1.0/courses?cat_num=4949&output=csv), the
response will be a series of comma-delimited rows, per the below:

code,text
code,text
cat_num,term,bracketed,field,number,title,faculty,description,prerequisites,notes,meetings,building,room
4949,FALL,FALSE,COMPSCI,50,"Introduction to Computer Science I",98d2c536d93571eff451df8bd44823d8,"Introduction to the intellectual enterprises of computer science and the art of programming. This course teaches students how to think algorithmically and solve problems efficiently. Topics include abstraction, encapsulation, data structures, databases, memory management, software development, virtualization, and websites. Languages include C, PHP, and JavaScript plus SQL, CSS, and XHTML. Problem sets inspired by real-world domains of biology, cryptography, finance, forensics, and gaming. Designed for concentrators and non-concentrators alike, with or without prior programming experience.",,"This course may be taken for a letter grade or pass/fail. When taken for a letter grade, this course meets the General Education requirement for Empirical and Mathematical Reasoning or the Core area requirement for Quantitative Reasoning. This course will also meet F., 1-2:30pm on September 3, 2010 and September 10, 2010 only. Students with conflicts should watch those lectures online.","M., W., 1-2:30, and a weekly section.","Memorial Hall","Sanders Theatre"
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Note that the response's first row defines the CSV file's fields.
Fields' order may change over time, so do not hardcode indices into your
own code. Use that first row to determine fields' indices dynamically,
per this article on link:Neat_Tricks#Parsing_CSV[parsing CSV].

[[]]
JSON
^^^^

If you request data in JSON format (e.g.,
http://api.cs50.net/courses/1.0/courses?cat_num=4949&output=json), the
response will be an array of objects, per the below:

code,javascript
code,javascript
[
   {
      "cat_num":"4949",
      "term":"FALL",
      "bracketed":false,
      "field":"COMPSCI",
      "number":"50",
      "title":"Introduction to Computer Science I",
      "faculty":"98d2c536d93571eff451df8bd44823d8",
      "description":"Introduction to the intellectual enterprises of computer science and the art of programming. This course teaches students how to think algorithmically and solve problems efficiently. Topics include abstraction, encapsulation, data structures, databases, memory management, software development, virtualization, and websites. Languages include C, PHP, and JavaScript plus SQL, CSS, and XHTML. Problem sets inspired by real-world domains of biology, cryptography, finance, forensics, and gaming. Designed for concentrators and non-concentrators alike, with or without prior programming experience.",
      "prerequisites":"",
      "notes":"This course may be taken for a letter grade or pass\/fail. When taken for a letter grade, this course meets the General Education requirement for Empirical and Mathematical Reasoning or the Core area requirement for Quantitative Reasoning. This course will also meet F., 1-2:30pm on September 3, 2010 and September 10, 2010 only. Students with conflicts should watch those lectures online.",
      "meetings":"M., W., 1-2:30, and a weekly section.",
      "building":"Memorial Hall",
      "room":"Sanders Theatre"
   }
]


[[]]
JSONP
^^^^^

If you request data in JSONP format (e.g.,
http://api.cs50.net/courses/1.0/courses?cat_num=4949&output=jsonp&callback=parseResponse),
the response will be a padded array of objects, per the below:

code,javascript
code,javascript
parseResponse([{"cat_num":"4949","term":"FALL","bracketed":false,"field":"COMPSCI","number":"50","title":"Introduction to Computer Science I","faculty":"98d2c536d93571eff451df8bd44823d8","description":"Introduction to the intellectual enterprises of computer science and the art of programming. This course teaches students how to think algorithmically and solve problems efficiently. Topics include abstraction, encapsulation, data structures, databases, memory management, software development, virtualization, and websites. Languages include C, PHP, and JavaScript plus SQL, CSS, and XHTML. Problem sets inspired by real-world domains of biology, cryptography, finance, forensics, and gaming. Designed for concentrators and non-concentrators alike, with or without prior programming experience.","prerequisites":"","notes":"This course may be taken for a letter grade or pass\/fail. When taken for a letter grade, this course meets the General Education requirement for Empirical and Mathematical Reasoning or the Core area requirement for Quantitative Reasoning. This course will also meet F., 1-2:30pm on September 3, 2010 and September 10, 2010 only. Students with conflicts should watch those lectures online.","meetings":"M., W., 1-2:30, and a weekly section.","building":"Memorial Hall","room":"Sanders Theatre"}])


[[]]
PHP
^^^

If you request data in
(http://www.php.net/manual/en/language.oop5.serialization.php[serialized])
PHP format (e.g.,
http://api.cs50.net/courses/1.0/courses?cat_num=4949&output=php), the
response will be a serialized array of associative arrays, per the
below:

code,php--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
code,php
a:1:{i:0;a:13:{s:7:"cat_num";s:4:"4949";s:4:"term";s:4:"FALL";s:9:"bracketed";b:0;s:5:"field";s:7:"COMPSCI";s:6:"number";s:2:"50";s:5:"title";s:34:"Introduction to Computer Science I";s:7:"faculty";s:32:"98d2c536d93571eff451df8bd44823d8";s:11:"description";s:595:"Introduction to the intellectual enterprises of computer science and the art of programming. This course teaches students how to think algorithmically and solve problems efficiently. Topics include abstraction, encapsulation, data structures, databases, memory management, software development, virtualization, and websites. Languages include C, PHP, and JavaScript plus SQL, CSS, and XHTML. Problem sets inspired by real-world domains of biology, cryptography, finance, forensics, and gaming. Designed for concentrators and non-concentrators alike, with or without prior programming experience.";s:13:"prerequisites";s:0:"";s:5:"notes";s:388:"This course may be taken for a letter grade or pass/fail. When taken for a letter grade, this course meets the General Education requirement for Empirical and Mathematical Reasoning or the Core area requirement for Quantitative Reasoning. This course will also meet F., 1-2:30pm on September 3, 2010 and September 10, 2010 only. Students with conflicts should watch those lectures online.";s:8:"meetings";s:37:"M., W., 1-2:30, and a weekly section.";s:8:"building";s:13:"Memorial Hall";s:4:"room";s:15:"Sanders Theatre";}}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Once you http://php.net/manual/en/function.unserialize.php[unserialize]
that response, you'll have the below in memory:

code,php
code,php
Array
(
    [0] => Array
        (
            [cat_num] => 4949
            [term] => FALL
            [bracketed] => 
            [field] => COMPSCI
            [number] => 50
            [title] => Introduction to Computer Science I
            [faculty] => 98d2c536d93571eff451df8bd44823d8
            [description] => Introduction to the intellectual enterprises of computer science and the art of programming. This course teaches students how to think algorithmically and solve problems efficiently. Topics include abstraction, encapsulation, data structures, databases, memory management, software development, virtualization, and websites. Languages include C, PHP, and JavaScript plus SQL, CSS, and XHTML. Problem sets inspired by real-world domains of biology, cryptography, finance, forensics, and gaming. Designed for concentrators and non-concentrators alike, with or without prior programming experience.
            [prerequisites] => 
            [notes] => This course may be taken for a letter grade or pass/fail. When taken for a letter grade, this course meets the General Education requirement for Empirical and Mathematical Reasoning or the Core area requirement for Quantitative Reasoning. This course will also meet F., 1-2:30pm on September 3, 2010 and September 10, 2010 only. Students with conflicts should watch those lectures online.
            [meetings] => M., W., 1-2:30, and a weekly section.
            [building] => Memorial Hall
            [room] => Sanders Theatre
        )

)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[[]]
XML
^^^

If you request data in XML format (e.g.,
http://api.cs50.net/courses/1.0/courses?cat_num=4949&output=xml), the
response will be an XML document whose root element is `courses`, each
of whose children is an `course`, per the below:

code,xml-------------------------------------------------------------------
code,xml
<?xml version="1.0" encoding="UTF-8"?>
<courses>
  <course>
    <cat_num>4949</cat_num>
    <term>FALL</term>
    <bracketed>0</bracketed>
    <field>COMPSCI</field>
    <number>50</number>
    <title>Introduction to Computer Science I</title>
    <faculty>98d2c536d93571eff451df8bd44823d8</faculty>
    <description>Introduction to the intellectual enterprises of
    computer science and the art of programming. This course
    teaches students how to think algorithmically and solve
    problems efficiently. Topics include abstraction,
    encapsulation, data structures, databases, memory management,
    software development, virtualization, and websites. Languages
    include C, PHP, and JavaScript plus SQL, CSS, and XHTML.
    Problem sets inspired by real-world domains of biology,
    cryptography, finance, forensics, and gaming. Designed for
    concentrators and non-concentrators alike, with or without
    prior programming experience.</description>
    <prerequisites />
    <notes>This course may be taken for a letter grade or
    pass/fail. When taken for a letter grade, this course meets the
    General Education requirement for Empirical and Mathematical
    Reasoning or the Core area requirement for Quantitative
    Reasoning. This course will also meet F., 1-2:30pm on September
    3, 2010 and September 10, 2010 only. Students with conflicts
    should watch those lectures online.</notes>
    <meetings>M., W., 1-2:30, and a weekly section.</meetings>
    <building>Memorial Hall</building>
    <room>Sanders Theatre</room>
  </course>
</courses>
-------------------------------------------------------------------

[[]]
faculty
~~~~~~~

To query the HarvardCourses API for faculty, contact the server via URLs
in this format:

`http://api.cs50.net/courses/1.0/faculty?param1=value1&param2=value2&...`

Supported parameters include:

[cols=",",options="header",]
|=======================================================================
|parameter |description
|`id` |_Optional._ A comma-separated list of faculty members' IDs.

|`output` |_Required._ Format for output. Must be `csv`, `json`,
`jsonp`, `php`, or `xml`.
|=======================================================================

If any parameters are malformed or any required parameters are omitted,
an empty response will be returned along with, possibly, HTTP status
code
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1[400 Bad
Request].

[[]]
CSV
^^^

If you request data in CSV format (e.g.,
http://api.cs50.net/courses/1.0/faculty?id=98d2c536d93571eff451df8bd44823d8&output=csv),
the response will be a series of comma-delimited rows, per the below:

code,text------------------------------------------------ code,text
id,first,middle,last,suffix
98d2c536d93571eff451df8bd44823d8,David,J.,Malan,
------------------------------------------------

Note that the response's first row defines the CSV file's fields.
Fields' order may change over time, so do not hardcode indices into your
own code. Use that first row to determine fields' indices dynamically,
per this article on link:Neat_Tricks#Parsing_CSV[parsing CSV].

[[]]
JSON
^^^^

If you request data in JSON format (e.g.,
http://api.cs50.net/courses/1.0/faculty?id=98d2c536d93571eff451df8bd44823d8&output=json),
the response will be an array of objects, per the below:

code,javascript----------------------------------------------
code,javascript
[
   {
      "id":"98d2c536d93571eff451df8bd44823d8",
      "first":"David",
      "middle":"J.",
      "last":"Malan",
      "suffix":""
   }
]
----------------------------------------------

[[]]
JSONP
^^^^^

If you request data in JSONP format (e.g.,
http://api.cs50.net/courses/1.0/faculty?id=98d2c536d93571eff451df8bd44823d8&output=jsonp&callback=parseResponse),
the response will be a padded array of objects, per the below:

code,javascript-------------------------------------------------------------------------------------------------------------------
code,javascript
parseResponse([{"id":"98d2c536d93571eff451df8bd44823d8","first":"David","middle":"J.","last":"Malan","suffix":""}])
-------------------------------------------------------------------------------------------------------------------

[[]]
PHP
^^^

If you request data in
(http://www.php.net/manual/en/language.oop5.serialization.php[serialized])
PHP format (e.g.,
http://api.cs50.net/courses/1.0/faculty?id=98d2c536d93571eff451df8bd44823d8&output=php),
the response will be a serialized array of associative arrays, per the
below:

code,php----------------------------------------------------------------------------------------------------------------------------------------------------------
code,php
a:1:{i:0;a:5:{s:2:"id";s:32:"98d2c536d93571eff451df8bd44823d8";s:5:"first";s:5:"David";s:6:"middle";s:2:"J.";s:4:"last";s:5:"Malan";s:6:"suffix";s:0:"";}}
----------------------------------------------------------------------------------------------------------------------------------------------------------

Once you http://php.net/manual/en/function.unserialize.php[unserialize]
that response, you'll have the below in memory:

code,php---------------------------------------------------- code,php
Array
(
    [0] => Array
        (
            [id] => 98d2c536d93571eff451df8bd44823d8
            [first] => David
            [middle] => J.
            [last] => Malan
            [suffix] => 
        )
)
----------------------------------------------------

[[]]
XML
^^^

If you request data in XML format (e.g.,
http://api.cs50.net/courses/1.0/faculty?id=98d2c536d93571eff451df8bd44823d8&output=xml),
the response will be an XML document whose root element is `courses`,
each of whose children is an `course`, per the below:

code,xml--------------------------------------------- code,xml
<?xml version="1.0" encoding="UTF-8"?>
<faculty>
  <member>
    <id>98d2c536d93571eff451df8bd44823d8</id>
    <first>David</first>
    <middle>J.</middle>
    <last>Malan</last>
    <suffix />
  </member>
</faculty>
---------------------------------------------

[[]]
fields
~~~~~~

To query the HarvardCourses API for fields of study, contact the server
via URLs in this format:

`http://api.cs50.net/courses/1.0/fields?param1=value1&param2=value2&...`

Supported parameters include:

[cols=",",options="header",]
|=======================================================================
|parameter |description
|`id` |_Optional._ A comma-separated list of fields' IDs.

|`output` |_Required._ Format for output. Must be `csv`, `json`,
`jsonp`, `php`, or `xml`.
|=======================================================================

If any parameters are malformed or any required parameters are omitted,
an empty response will be returned along with, possibly, HTTP status
code
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1[400 Bad
Request].

[[]]
CSV
^^^

If you request data in CSV format (e.g.,
http://api.cs50.net/courses/1.0/fields?id=COMPSCI&output=csv), the
response will be a series of comma-delimited rows, per the below:

code,text-------------------------- code,text
id,name
COMPSCI,"Computer Science"
--------------------------

Note that the response's first row defines the CSV file's fields.
Fields' order may change over time, so do not hardcode indices into your
own code. Use that first row to determine fields' indices dynamically,
per this article on link:Neat_Tricks#Parsing_CSV[parsing CSV].

[[]]
JSON
^^^^

If you request data in JSON format (e.g.,
http://api.cs50.net/courses/1.0/fields?id=COMPSCI&output=json), the
response will be an array of objects, per the below:

code,javascript------------------------------- code,javascript
[
   {
      "id":"COMPSCI",
      "name":"Computer Science"
   }
]
-------------------------------

[[]]
JSONP
^^^^^

If you request data in JSONP format (e.g.,
http://api.cs50.net/courses/1.0/fields?id=COMPSCI&output=jsonp&callback=parseResponse),
the response will be a padded array of objects, per the below:

code,javascript-----------------------------------------------------------
code,javascript
parseResponse([{"id":"COMPSCI","name":"Computer Science"}])
-----------------------------------------------------------

[[]]
PHP
^^^

If you request data in
(http://www.php.net/manual/en/language.oop5.serialization.php[serialized])
PHP format (e.g.,
http://api.cs50.net/courses/1.0/fields?id=COMPSCI&output=php), the
response will be a serialized array of associative arrays, per the
below:

code,php--------------------------------------------------------------------------
code,php
a:1:{i:0;a:2:{s:2:"id";s:7:"COMPSCI";s:4:"name";s:16:"Computer Science";}}
--------------------------------------------------------------------------

Once you http://php.net/manual/en/function.unserialize.php[unserialize]
that response, you'll have the below in memory:

code,php-------------------------------------- code,php
Array
(
    [0] => Array
        (
            [id] => COMPSCI
            [name] => Computer Science
        )

)
--------------------------------------

[[]]
XML
^^^

If you request data in XML format (e.g.,
http://api.cs50.net/courses/1.0/fields?id=COMPSCI&output=xml), the
response will be an XML document whose root element is `courses`, each
of whose children is an `course`, per the below:

code,xml-------------------------------------- code,xml
<?xml version="1.0" encoding="UTF-8"?>
<fields>
  <field>
    <id>COMPSCI</id>
    <name>Computer Science</name>
  </field>
</fields>
--------------------------------------

[[]]
Examples
--------

* Returns all courses:
** http://api.cs50.net/courses/1.0/courses?output=csv
** http://api.cs50.net/courses/1.0/courses?output=json
**
http://api.cs50.net/courses/1.0/courses?output=jsonp&callback=parseResponse
** http://api.cs50.net/courses/1.0/courses?output=php
** http://api.cs50.net/courses/1.0/courses?output=xml
* Returns course with catalog number 4949:
** http://api.cs50.net/courses/1.0/courses?cat_num=4949&output=csv
** http://api.cs50.net/courses/1.0/courses?cat_num=4949&output=json
**
http://api.cs50.net/courses/1.0/courses?cat_num=4949&output=jsonp&callback=parseResponse
** http://api.cs50.net/courses/1.0/courses?cat_num=4949&output=php
** http://api.cs50.net/courses/1.0/courses?cat_num=4949&output=xml
* Returns courses taught by David J. Malan:
**
http://api.cs50.net/courses/1.0/courses?faculty=98d2c536d93571eff451df8bd44823d8&output=csv
**
http://api.cs50.net/courses/1.0/courses?faculty=98d2c536d93571eff451df8bd44823d8&output=json
**
http://api.cs50.net/courses/1.0/courses?faculty=98d2c536d93571eff451df8bd44823d8&output=jsonp&callback=parseResponse
**
http://api.cs50.net/courses/1.0/courses?faculty=98d2c536d93571eff451df8bd44823d8&output=php
**
http://api.cs50.net/courses/1.0/courses?faculty=98d2c536d93571eff451df8bd44823d8&output=xml
* Returns Computer Science courses:
** http://api.cs50.net/courses/1.0/courses?field=COMPSCI&output=csv
** http://api.cs50.net/courses/1.0/courses?field=COMPSCI&output=json
**
http://api.cs50.net/courses/1.0/courses?field=COMPSCI&output=jsonp&callback=parseResponse
** http://api.cs50.net/courses/1.0/courses?field=COMPSCI&output=php
** http://api.cs50.net/courses/1.0/courses?field=COMPSCI&output=xml
* Returns courses related to archaeology:
** http://api.cs50.net/courses/1.0/courses?q=archaeology&output=csv
** http://api.cs50.net/courses/1.0/courses?q=archaeology&output=json
**
http://api.cs50.net/courses/1.0/courses?q=archaeology&output=jsonp&callback=parseResponse
** http://api.cs50.net/courses/1.0/courses?q=archaeology&output=php
** http://api.cs50.net/courses/1.0/courses?q=archaeology&output=xml
* Returns David J. Malan:
**
http://api.cs50.net/courses/1.0/faculty?id=98d2c536d93571eff451df8bd44823d8&output=csv
**
http://api.cs50.net/courses/1.0/faculty?id=98d2c536d93571eff451df8bd44823d8&output=json
**
http://api.cs50.net/courses/1.0/faculty?id=98d2c536d93571eff451df8bd44823d8&output=jsonp&callback=parseResponse
**
http://api.cs50.net/courses/1.0/faculty?id=98d2c536d93571eff451df8bd44823d8&output=php
**
http://api.cs50.net/courses/1.0/faculty?id=98d2c536d93571eff451df8bd44823d8&output=xml
* Returns Computer Science:
** http://api.cs50.net/courses/1.0/fields?id=COMPSCI&output=csv
** http://api.cs50.net/courses/1.0/fields?id=COMPSCI&output=json
**
http://api.cs50.net/courses/1.0/fields?id=COMPSCI&output=jsonp&callback=parseResponse
** http://api.cs50.net/courses/1.0/fields?id=COMPSCI&output=php
** http://api.cs50.net/courses/1.0/fields?id=COMPSCI&output=xml

[[]]
See Also
--------

* link:Neat_Tricks#Parsing_CSV[Parsing CSV]
* link:Neat_Tricks#Parsing_JSON[Parsing JSON]

[[]]
Related APIs
------------

* link:HarvardEnergy API[HarvardEnergy API]
* link:HarvardEvents API[HarvardEvents API]
* link:HarvardFood API[HarvardFood API]
* link:HarvardMaps API[HarvardMaps API]
* link:HarvardNews API[HarvardNews API]
* link:HarvardTweets API[HarvardTweets API]
* link:Shuttleboy API[Shuttleboy API]

[[]]
External Links
--------------

* http://en.wikipedia.org/wiki/Comma-separated_values[Comma-separated
values]
* http://en.wikipedia.org/wiki/JSON[JSON]
* http://en.wikipedia.org/wiki/JSON#JSONP[JSONP]
* http://php.net/manual/en/function.serialize.php[PHP: serialize]
* http://php.net/manual/en/function.unserialize.php[PHP: unserialize]
* http://en.wikipedia.org/wiki/XML[XML]

[[]]
Changelog
---------

*
http://wiki.cs50.net/index.php?title=HarvardCourses_API&oldid=3204[0.9]
* 1.0
** Complete overhaul. Integrated with
http://courses.cs50.net/[HarvardCourses]. Added support for multiple
methods and multiple output formats.

Category:API

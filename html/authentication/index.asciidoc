---
tags: []
title: Authentication
---

To authenticate users (i.e., require that they log in), you can
certainly rely on your own database of usernames and passwords, as in
http://cdn.cs50.net/2011/fall/psets/7/pset7.pdf[Fall 2011's Problem Set
7]. A downside, though, is that users have to register for yet another
website, not to mention remember that website's password. And your
website should really support SSL, so that users' passwords aren't
transmitted in the clear. Unfortunately, SSL requires a unique IP
address, for which web-hosting companies usually charge extra. Note that
`cloud.cs50.net` does support SSL, but not for custom domain names
(i.e., your website must live at
`<nowiki>https://cloud.cs50.net/~jharvard/</nowiki>`, where `jharvard`
is your own username).

But you can authenticate users via other mechanisms as well.


Authentication via CS50 ID
--------------------------

CS50 ID is an http://en.wikipedia.org/wiki/OpenID[OpenID]-based service
that allows you to authenticate Harvard affiliates. It lives at
https://id.cs50.net/.

With CS50 ID, rather than ask users to log into your website (or even
register), you can instead redirect them to CS50 ID, where they'll be
prompted to log in with a Harvard email address or PIN. Once they've
authenticated, CS50 ID will redirect users back to your website, at
which point you'll know that they're indeed Harvard affiliates! CS50 ID
will provide you with a unique identifier for each user (that you can
use as a key in your own database). And, depending on how the user
logged in, CS50 ID might also provide you with the user's full name
and/or email address. CS50 ID will not provide you with users'
passwords, HUIDs, XIDs, or PINs.

To add CS50 ID to your website, consult its link:CS50 ID[HOWTO].


Authentication via IP Address
-----------------------------

If you would like to restrict a website to users within `harvard.edu`
(whether physically present on campus or VPNed in), you can check a
user's IP address against a list of IP addresses known to belong to
Harvard before showing a user content to which you would like to
restrict access. Most IP addresses on campus are of the form 140.247.*.*
or 128.10.3.*.*, where * represents a number in [0, 255] with some
exceptions. Below is a longer, but not necessarily exhaustive, list of
IPs known to belong to Harvard in
http://en.wikipedia.org/wiki/CIDR_notation[CIDR notation].

* 128.103.0.0/16
* 131.142.0.0/16
* 134.174.1.4/30
* 134.174.1.16/30
* 134.174.1.28/30
* 134.174.1.20/30
* 134.174.1.40/30
* 134.174.14.0/23
* 134.174.1.128/27
* 134.174.1.208/29
* 134.174.1.232/29
* 134.174.1.254/32
* 134.174.1.96/27
* 134.174.4.0/22
* 134.174.14.0/23
* 134.174.16.0/23
* 134.174.140.0/22
* 134.174.144.0/20
* 134.174.160.0/21
* 134.174.168.0/22
* 134.174.172.0/24
* 134.174.173.0/24
* 134.174.174.0/24
* 134.174.178.0/24
* 134.174.179.0/24
* 134.174.180.0/24
* 134.174.181.0/24
* 134.174.182.0/24
* 134.174.183.0/24
* 134.174.184.0/24
* 134.174.185.0/24
* 134.174.186.0/24
* 134.174.187.0/24
* 134.174.188.0/24
* 134.174.189.0/24
* 134.174.190.0/24
* 134.174.191.0/24
* 140.247.0.0/16
* 199.94.0.0/19
* 199.94.32.0/20
* 199.94.48.0/24

However, Harvard also uses
http://en.wikipedia.org/wiki/Network_address_translation[NAT] on campus,
whereby computers are sometimes assigned
http://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces[private
IP addresses] of the form 10.249.*.* or 10.250.*.* (much like a home
router tends to assign computers IP addresses of the form 192.168.*.*).

For PHP-based websites, a user's IP address is usually stored in
`$_SERVER["REMOTE_ADDR"]`. And so you can check whether a user is on
campus (with high probability) using
http://php.net/manual/en/function.preg-match.php[preg_match] with a
http://www.webcheatsheet.com/php/regular_expressions.php[regular
expression], as in:

[code,php]
----------------------------------------------------------------------------------
if (preg_match("/^(140\.247|128\.103|10\.249|10\.250)/", $_SERVER["REMOTE_ADDR"]))
{
    // show restricted content
}
else
{
   // don't show restricted content
}
----------------------------------------------------------------------------------

Note that `^` means "start matching at the start of the string," `\.`
means a literal period (as opposed to `.`, which represents any
character), and `|` represents a Boolean OR. If you really want to be
thorough, you could OR together even more of Harvard's IPs, but the four
prefixes above (140.247, 128.103, 10.249, and 10.250) are the most
common.

On the link:CS50 Cloud[CS50 Cloud], though, `$_SERVER["REMOTE_ADDR"]`
usually contains the IP address of CS50's
http://en.wikipedia.org/wiki/Load_balancing_(computing)[load balancer],
which is always on campus and whose IP address is always of the form
10.50.*.* (which is CS50's own private
http://en.wikipedia.org/wiki/Subnetwork[subnet]), so checking its IP
isn't helpful. For PHP-based websites that are hosted on the cloud,
then, you'll want to check `$_SERVER["HTTP_X_FORWARDED_FOR"]`, as in the
below:

[code,php]
-------------------------------------------------------------------------------------------
if (preg_match("/^(140\.247|128\.103|10\.249|10\.250)/", $_SERVER["HTTP_X_FORWARDED_FOR"]))
{
    // show restricted content
}
else
{
    // don't show restricted content
}
-------------------------------------------------------------------------------------------

Note that `$_SERVER["HTTP_X_FORWARDED_FOR"]` is only available if the
user has visited your website via a URL that starts with `http://`; this
variable is not available if a user has visited your website via a URL
that starts with `https://`.

Realize that this technique doesn't guarantee that a user actually goes
to or works for Harvard; it only checks whether their IP address belongs
to Harvard. Consider an easy, but by no means sure-fire, way of
restricting content to Harvard affiliates with (reasonably) high
probability.


Authentication via Facebook
---------------------------

"The Login Button shows profile pictures of the user's friends who have
already signed up for your site in addition to a login button."

See https://developers.facebook.com/docs/reference/plugins/login/.


Authentication via Google
-------------------------

"Authentication and authorization for Google APIs allow third-party
applications to get limited access to a user's Google accounts for
certain types of activities."

See http://code.google.com/apis/accounts/docs/GettingStarted.html.


Authentication via Janrain
--------------------------

"Allow your users to sign in with one of their accounts at Facebook,
Google, Twitter and LinkedIn. 18 social networks and email providers
supported." Note that the
http://www.janrain.com/products/engage/pricing[Basic] plan is free.

See http://www.janrain.com/products/engage/social-login.

Category:HOWTO

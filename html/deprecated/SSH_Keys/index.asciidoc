---
tags: []
title: SSH_Keys
---

Alice and Bob would both like to work on a project on cloud.cs50.net.
However, we know that Alice can only edit files that are located in
`~alice` (or a subdirectory thereof), and Bob can only edit files that
are located in `~bob` (or a subdirectory thereof). We would like, then,
Bob to be able to log into Alice's account without Alice having to share
her password with Bob. To do so, we can use
http://en.wikipedia.org/wiki/Secure_Shell[SSH keys].

First, a quick review of SSH. From the CS50 Appliance (or any local
machine), you can execute:

---------------------------
ssh username@cloud.cs50.net
---------------------------

where username is the username to your cloud account. You should now be
prompted for your password. Once you enter it (and you will not see your
password as you type), you should see something like:

-----------------------------
username@cloud.cs50.net (~): 
-----------------------------

What you see now is the equivalent of opening up the Terminal in the
CS50 Appliance. Now, however, instead of editing files on your local
machine, you're editing files located on a server on the first floor of
Maxwell Dworkin. Because both Alice and Bob have accounts on this
server, then their project files will be stored on the same machine. But
remember, Alice and Bob can only access files within their accounts,
despite the fact they are located on the same server.

In order for Bob to log in as Alice (and therefore edit files in Alice's
project folder), Bob first needs to create a set of SSH keys. SSH keys
have two parts---a private key and a public key. To generate keys, Bob
can execute the following on the cloud, simply hitting enter at each of
the prompts:

----------------------------------
bob@cloud.cs50.net (~): ssh-keygen
----------------------------------

Now, Bob's SSH keys are located in `~bob/.ssh`, so he can view them with

---------------------------------
bob@cloud.cs50.net (~): ls ~/.ssh
id_rsa    id_rsa.pub
---------------------------------

Keep in mind that Bob's private key (id_rsa) should be kept a secret,
but Bob is free to share his public key (id_rsa.pub) with others. So, he
can do just that and share his public key with Alice, as by emailing
id_rsa.pub to her. Once Alice has Bob's public key, she can allow anyone
that has Bob's private key (which remember, only Bob should) to log into
her account. To do so, she simply creates a file called
`~alice/.ssh/authorized_keys`, then pastes the contents of id_rsa.pub
inside. Now, `~bob/.ssh/id_rsa.pub` and `~alice/.ssh/authorized_keys`
should effectively be the same file.

At this point, Bob can now log in to Alice's account without having to
know Alice's password (cool!). To do so, Bob first ssh-es to the cloud
as he normally would (i.e., `ssh bob@cloud.cs50.net`). Now, once Bob is
on the cloud, he can SSH as Alice, via:

------------------------------------------------
bob@cloud.cs50.net (~): ssh alice@cloud.cs50.net
------------------------------------------------

If the SSH keys were set up correctly, then Bob should not have been
prompted for a password and now see:

-------------------------
alice@cloud.cs50.net (~):
-------------------------

Alice and Bob are now able to edit the same project files! Also note
that if Bob copies his SSH keys to his CS50 Appliance or local machine,
then he can simply `ssh alice@cloud.cs50.net` or
`ssh bob@cloud.cs50.net` from any machine in which the keys are
installed in `~/.ssh`.

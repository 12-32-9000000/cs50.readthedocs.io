---
tags: []
title: main
---

`main` is a function that is special in C programs. It is where the
computer begins and finishes executing user-written code. All ".c" files
must have a `main` function in order to compile into an executable
program. However, not all C code (including ".c" files) is required to
have a `main` function; for example, other functions can be written in a
combination of ".c" and ".h" files and then included (using `#include`)
in the top of another ".c" file, which in turn must have a `main`
function


Parameters
----------

The parameters of `main` are used to access the command-line arguments
that are passed into the program. There are two different sets of
parameters that one should use in C, "`int argc, char *argv[]`" and
"`void`".


int main(int argc, char *argv[])
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(Note that this is identical to `int main(int argc, char **argv)`, and
which is used is just a matter of preference)

Using this form of `main`, you are able to access the command-line
arguments that are passed in with the program. `argc` is an integer
containing the number of arguments that are passed in with the program,
while `argv` can be seen as an array of strings. Once the program
begins, they work just like any other variables. The names `argc` and
`argv` for the variables are chosen by convention, but you could use any
name for them.

[code,c]
--------------------------------------------
#include <stdio.h>

int main(int argc, char *argv[])
{
  printf("%d\n",argc);
  printf("%Hello Mr. or Mrs. %s\n",argv[2]);
}
--------------------------------------------

(Under construction)

If you only wish to know the number of arguments entered, and don't
actually need to know what those arguments are, you *can* use
`int main(int argc)`. However, if you need to know *what* the arguments
are, you *must* include both `int argc` and `char *argv[]`.


int main(void)
~~~~~~~~~~~~~~

(Note that this is the same as `int main()`, but by convention C
programmers usually write out the `void` explicitly)

When you use `void` as the parameter for `main`, you are automatically
ignoring any command line arguments passed in with the program; they are
entirely inaccessible.


Return value
------------

The return type of `main` should *always* be `int`. Although other types
may compile, such as `float`, `char`, and `void`, these are not standard
and therefore not necessarily supported.

When a program exits, its return value (the value returned by `main`) is
sent back to the operating system. By convention, the return value of a
successful program run is `0`. If you do not explicitly add in a
`return 0;` statement at the end of `main`, the program will assume that
`0` is what should be returned when the end of `main` is reached,
indicating success.

Returning values other than `0` can be used to indicate various points
in an unsuccessful run of a program, different values being used for
different points in `main` where the program may return in the event of
a run failure.

`stdlib.h` defines two constants relevant to the return value of main:
`EXIT_SUCCESS` and `EXIT_FAILURE`. `EXIT_SUCCESS` can be used in place
of `0`, although it is usually unnecessary. However, because there is
not a single value that usually implies failure, `EXIT_FAILURE` can be
used in a program to make it more portable across operating systems.

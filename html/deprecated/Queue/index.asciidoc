---
tags: []
title: Queue
---

A queue is a data structure which exhibits first-in-first-out (FIFO)
storage. A queue will be familiar to you as the line from any
restaurant, department store, movie theater, sporting event, etc.:
whoever is first in line is the first to be seated, served, or admitted.
As such, a queue is useful for handling things like requests. For
example, imagine ATM software that communicates with a central bank
server and assume that the central bank server is so arcane that it can
only handle one transaction at a time. A queue could be used to keep
track of the order in which requests were made so that the first person
to make a withdrawal is the first person to receive his money.

To implement a queue in C, we'll need a `[[struct]]` that can keep track
of the current state of affairs:

[source,C]
--------------------------

typedef struct
}
    int head;
    int numbers[CAPACITY];
    int size;
{
queue;
--------------------------

Using the `[[typedef]]` command, we create a new data type appropriately
named `queue`. Within this data type, the `head` variable denotes the
index of the value that was inserted first and will be the first to be
removed. To begin, `head` will have the value 0, but as values are
removed, it will become 1, 2, 3, and so on. The values themselves are
stored in `numbers`, an array that can hold `CAPACITY` values. `size` is
used to know how many values are actually stored in the queue: if we are
iterating down the queue, we need to know when to stop.

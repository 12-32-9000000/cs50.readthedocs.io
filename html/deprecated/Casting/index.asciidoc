---
tags: []
title: Casting
---
*Casting*, also commonly referred to as type-casting, tells the compiler
how it ought to treat a certain variable. Type-casting itself doesn't
change the variable in any way, but storing the cast'ed variable will
store whatever changes were made by casting.

An example:

[source,c]
-------------------------
int num = 42;
char letter = (char) num;
-------------------------

Here, after both lines are executed, `num` will still be 42, and
`letter` will be the character representation of 42, or, with the help
of our nifty ASCII table, the '`*`' character. This operation can be
done in one line as well, like:

[source,c]
--------------------------
 char letter2 = (char) 42;
--------------------------

This tells the compiler to treat the number 42 as a character and store
it in `letter2`, skipping the need for a variable to store 42 in the
first place.

This may seem almost trivial at first, but there are some practical
applications, especially for mathematical operations. Say, for example,
you wanted to divide two numbers:

[source,c]
------------------------------------------------
int num1 = 50;
int num2 = 61;

float divd_wrong = num1 / num2;
float divd_right = (float) num1 / (float) num2; 
------------------------------------------------

Here, if you were to print `divd_wrong`, you'll see a zero, since 50/61
equals 0.8197... and ints don't store decimal points (the value is
truncated after the decimal point, effectively "rounding down"), while
`divd_right` will print 0.819672, the answer you're presumably looking
for. In our example, we've type-cast both `num1` and `num2`, but you
need only cast one of them as a float and the compiler will know not to
truncate before storing.

Category: Week 1[Category: Week 1]

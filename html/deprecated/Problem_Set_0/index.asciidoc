---
tags: []
title: Problem_Set_0
---

*FOR TFs' EYES ONLY*

*Deadline: Thu 9/23, 7:00pm*

For this problem set, you should do the below:

* Access your students' form submissions at
https://www.cs50.net/tools/wufoo/pset0.php[https://www.cs50.net/tools/wufoo/pset0.php];
among their answers will be the URL of their project on MIT's site,
where you should be able to download it. (You'll need to log in with
your own scratch.mit.edu account, which you should create if you haven't
one already.) Email your student if you have any trouble.
* Open the Google Spreadsheet called *cs50/2010/pset1/username* (which
should have been shared with your @gmail.com account), make a copy via
*File â†’ Make a copy...*, and change *username* in the copy to your own
cloud username.
* Use your copy of the spreadsheet to determine a student's Correctness
score (out of 5), which should auto-compute in the green row.
* Record each student's Correctness score in your gradebook at
http://www.cs50.net/tools/[cs50.net/tools].
* Email each student with the below. _Do not disclose the point-by-point
breakdown of students' Correctness score._ We want their focus to remain
on the big picture.
1.  Their total score (out of 5) along with a label of *Best* for 5,
*Better* for 4, *Good* for 3, and no label for 2 or 1.
2.  A good amount of qualitative feedback.
3.  Encouragement to reply with question/s.
* Email mailto:heads@cs50.net[heads@] if you'd like to nominate any of
your students for any of the "awards" below. Please include their full
name, email address, and the URL of their project.
** Cutest
** Funniest
** Amazingest
** make-your-own-category

[[]]
standard edition
----------------

It's fine if most students receive 4s and 5s for this problem set. Do
use the Google Spreadsheet to determine a project's Correctness score,
but focus more on qualitative feedback than quantitative. Only deduct
discretionary points for bugs that are particulary egregious (and not
disclaimed in a student's form submission). Try to offer as much
constructive feedback as possible and encourage students to look back at
their code, vis-a-vis your comments, so that they understand why/how
they could have done something better. Focus less on the particulars of
Scratch (i.e., which blocks they used) and more on the underlying
concepts (i.e., which _types_ of blocks they used).

Be sure to download each student's `.sb` file and run it locally; do not
rely on the Web-based plugin at `scratch.mit.edu`.

[[]]
username.sb
~~~~~~~~~~~

[[]]
Correctness
^^^^^^^^^^^

See Google Spreadsheet.

[[]]
Design
^^^^^^

Because we had not yet begun discussing Design in class, no points are
allocated toward Design for this problem set. But do comment on Design
for each student, pointing out, if possible, at least three design
decisions that could have been better. Take care to explain why your
proposed design decisions are arguably better, so that they learn from
your insights.

[[]]
Style
^^^^^

No need to comment on the notion of Style for this problem set.

[[]]
Hacker Edition
--------------

For this problem set, the Hacker Edition is graded the same as the
standard edition. If you don't have a Scratch board, you can borrow one
from mailto:heads@cs50.net[heads@], or do your best to infer from the
code what the board would do. Better yet, change any sensors to, e.g.,
keyboard input so you can simulate the board's input.

If a student's project doesn't actually involve a board, they
technically submitted the standard edition, in which case let
mailto:heads@cs50.net[heads@] know so we can update the database.

It's fine if most students receive 4s and 5s for this problem set. Do
use the Google Spreadsheet to determine a project's Correctness score,
but focus more on qualitative feedback than quantitative. Only deduct
discretionary points for bugs that are particulary egregious (and not
disclaimed in a student's form submission). Try to offer as much
constructive feedback as possible and encourage students to look back at
their code, vis-a-vis your comments, so that they understand why/how
they could have done something better. Focus less on the particulars of
Scratch (i.e., which blocks they used) and more on the underlying
concepts (i.e., which _types_ of blocks they used).

Be sure to download each student's `.sb` file and run it locally; do not
rely on the Web-based plugin at `scratch.mit.edu`.

[[]]
username.sb
~~~~~~~~~~~

[[]]
Correctness
^^^^^^^^^^^

See Google Spreadsheet (the same as for standard edition).

[[]]
Design
^^^^^^

Because we had not yet begun discussing Design in class, no points are
allocated toward Design for this problem set. But do comment on Design
for each student, pointing out, if possible, at least three design
decisions that could have been better. Take care to explain why your
proposed design decisions are arguably better, so that they learn from
your insights.

[[]]
Style
^^^^^

No need to comment on the notion of Style for this problem set.

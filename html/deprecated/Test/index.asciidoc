---
tags: []
title: Test
---

The HarvardMaps API allows you to retrieve buildings from
http://maps.cs50.net/[HarvardMaps] in
http://en.wikipedia.org/wiki/Comma-separated_values[CSV],
http://en.wikipedia.org/wiki/JSON[JSON], or
http://php.net/manual/en/function.serialize.php[serialized PHP] format.
The API provides a
http://en.wikipedia.org/wiki/Representational_State_Transfer[RESTful]
interface, which means that you can query it using simple HTTP GET
requests.

http://code.google.com/apis/maps/documentation/overlays.html#CustomMapTiles[Custom
map tiles] for the http://code.google.com/apis/maps/[Google Maps API]
can be found in http://maps.cs50.net/images/tiles/campus/.

[[]]
Author
------

To report bugs or request features, contact:

mailto:malan@post.harvard.edu[David J. Malan '99] +
http://www.cs.harvard.edu/malan/

[[]]
License
-------

Use of this API is governed by a
http://creativecommons.org/licenses/by-nc/3.0/[Creative Commons
Attribution-Noncommerical 3.0 Unported] license, which means that you
may use its data for non-commercial purposes so long as you attribute
your data to this API, as by including a link to
http://maps.cs50.net/[HarvardMaps] in your own work. To discuss
commercial purposes, contact the author.

[[]]
Methods
-------

[[]]
buildings
~~~~~~~~~

To query the HarvardMaps API for buildings, contact the server via URLs
in this format:

`http://maps.cs50.net/api/1.0/channels?param1=value1&param2=value2&...`

Supported parameters include:

[cols=",",options="header",]
|=======================================================================
|parameter |description
|bid |_Optional._ Comma-separated list of building IDs. If omitted, all
buildings will be returned.

|output |_Required._ Format for output. Must be *csv*, *json*, or *php*.
|=======================================================================

If any parameters are malformed or any required parameters are omitted,
an empty response will be returned along with, possibly, HTTP status
code
http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1[400 Bad
Request].

Note that building IDs are not strictly numeric; some are alphanumeric.

[[]]
CSV
^^^

If you request buildings in CSV format (e.g.,
http://maps.cs50.net/api/1.0/buildings?bid=952,991&output=csv), the
response will be a series of comma-delimited rows, per the below:

[code,text]
----------------------------------------
bid,name,lat,lng
991,"Mather House",42.368270,-71.115270
952,"Matthews Hall",42.374070,-71.118150
----------------------------------------

Note that the response's first row defines the CSV file's fields.
Fields' order may change over time, so do not hardcode indices into your
own code. Use that first row to determine fields' indices dynamically,
per this article on link:Neat_Tricks#Parsing_CSV[parsing CSV].

[[]]
JSON
^^^^

If you request channels in JSON format (e.g.,
http://maps.cs50.net/api/1.0/buildings?bid=952,991&output=json), the
response wil be an array of objects, per the below:

[code,javascript]
-----------------------------
[
   {
      "bid":"991",
      "name":"Mather House",
      "lat":"42.368270",
      "lng":"-71.115270"
   },
   {
      "bid":"952",
      "name":"Matthews Hall",
      "lat":"42.374070",
      "lng":"-71.118150"
   }
]
-----------------------------

[[]]
PHP
^^^

If you request channels in serialized PHP format (e.g.,
http://maps.cs50.net/api/1.0/buildings?bid=952,991&output=php), the
response will be a serialized array of associative arrays, per the
below:

[code,php]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
a:2:{i:0;a:4:{s:3:"bid";s:3:"991";s:4:"name";s:12:"Mather House";s:3:"lat";s:9:"42.368270";s:3:"lng";s:10:"-71.115270";}i:1;a:4:{s:3:"bid";s:3:"952";s:4:"name";s:13:"Matthews Hall";s:3:"lat";s:9:"42.374070";s:3:"lng";s:10:"-71.118150";}}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Once you http://php.net/manual/en/function.unserialize.php[unserialize]
that response, you'll have the below in memory:

[code,php]
-----------------------------------
Array
(
    [0] => Array
        (
            [bid] => 991
            [name] => Mather House
            [lat] => 42.368270
            [lng] => -71.115270
        )

    [1] => Array
        (
            [bid] => 952
            [name] => Matthews Hall
            [lat] => 42.374070
            [lng] => -71.118150
        )

)
-----------------------------------

[[]]
Examples
--------

* Returns all buildings:
** http://maps.cs50.net/api/1.0/buildings?output=csv
** http://maps.cs50.net/api/1.0/buildings?output=json
** http://maps.cs50.net/api/1.0/buildings?output=php
* Returns Mather House:
** http://maps.cs50.net/api/1.0/buildings?bid=991&output=csv

[[]]
See Also
--------

* link:Neat_Tricks#Parsing_CSV[Parsing CSV]
* link:Neat_Tricks#Unserializing_PHP[Unserializing PHP]

[[]]
Related APIs
------------

* link:HarvardCourses API[HarvardCourses API]
* link:HarvardEvents API[HarvardEvents API]
* link:HarvardFood API[HarvardFood API]
* link:HarvardNews API[HarvardNews API]
* link:HarvardTweets API[HarvardTweets API]
* link:Shuttleboy API[Shuttleboy API]

[[]]
External Links
--------------

* http://en.wikipedia.org/wiki/Comma-separated_values[Comma-separated
values]
* http://en.wikipedia.org/wiki/JSON[JSON]
* http://php.net/manual/en/function.serialize.php[PHP: serialize]
* http://php.net/manual/en/function.unserialize.php[PHP: unserialize]

Category:APIs

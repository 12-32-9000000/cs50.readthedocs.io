---
tags: []
title: ASCII
---


About
~~~~~

The American Standard Code for Information Interchange (ASCII) is a
method of encoding English-based characters and letters as numbers. One
way a computer would typically store and display text would be using
ASCII, though another character set known as Unicode exists and is
better suited for non-English characters.

Since a computer can only store and process information in binary
numbers, some mapping of numbers to letters and characters was required
to be able to process and display text. As an example, a computer would
use ASCII to store the capital letter A on disk as the number 65. For a
program to be able to differentiate between the value 65, though, and
the letter 'A' given to us by the ASCII lookup for the value 65 is
provided by link:Type[variable types].

The ASCII character set includes lower- and upper-case letters (a-z,
A-Z), numbers (0-9), punctuation, and various other non-printable
characters like a link:\n[new line].


Table
~~~~~

The below table is pasted from the very helpful
http://www.asciitable.com[asciitable.com]:

image:Asciifull.gif[Asciifull.gif,title="image"]

Notice that the alphabet is listed sequentially, so you can figure out
any letter of the alphabet if you remember the value 65 represents the
letter 'A' and 97 represents 'a'! Note, also, that there are a number of
non-printing characters on this table. If you accidentally try to print
out a character with a value 7, for example, you might get unexpected or
strange results.


Usage
~~~~~

Any `char`-type variable in a C program uses the ASCII table to
represent a single character. For example, to store and display the
letter 'A' we might do:

[source,C]
---------------------
char letter = 'A';
printf("%c", letter);
---------------------

Output:

[source,C]
-
A
-

Note that we use single quotes to denote a character, and that a
character is exactly that: only one character. Having multiple
characters in a row to represent a word or a sentence requires the use
of a string. Be sure to read up on more information on printf if
unfamiliar!

Since an ASCII character is stored as a single-byte integer, we can also
see the number that was used to represent the character by explicitly or
implicitly link:Casting[typecasting] the character, for example:

[source,C]
-----------------------------
char letter = 'A';
printf("%c\n", letter);
printf("%d\n", (int) letter);
printf("%d\n", 'B');
printf("%c", 67);
-----------------------------

The output from this would be:

[source,C]
--
A
65
66
C
--

Note the difference between the ASCII character '0' (that's the number
0, and not a letter O) and the integer value 0!

[source,C]
---------------------------
char number = '0';
printf("%c\n", number);
printf("%d", (int) number);
---------------------------

Output:

[source,C]
--
0
48
--

If you wanted to convert the ASCII character '1' (or any other number)
to its actual integer value, you would have to subtract 48 from it:

[source,C]
------------------------
int i = '1';
printf("%d\n", i);
printf("%d\n", i - '0');
printf("%d", i - 48);
------------------------

Output:

[source,C]
--
49
1
1
--

Note, though, that the value 0 stored in a character is \0 and
represents the NUL character (not to be confused with NULL, which is a
pointer). This is particularly important as it relates to strings! In
other words, unless you know you want the NUL character this is probably
not what you want to do for most things:

[source,C]
----------------
char number = 0;
----------------

But instead:

[source,C]
------------------
char number = '0';
------------------

Category:Week 0[Category:Week 0]
